
/Users/admin/Documents/CTD_2023/Labs/Lab5/target/5.3.0/argon/Lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001cec  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b5d08  000b5d08  00005d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000006c  2003e63c  000b5d2c  0000e63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000148  2003e6a8  2003e6a8  0001e6a8  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b5d98  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b5d9c  000b5d9c  00015d9c  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b5da2  000b5da2  00015da2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b5dc6  000b5dc6  00015dc6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   000f2d46  00000000  00000000  00015dca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000f40c  00000000  00000000  00108b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00032a44  00000000  00000000  00117f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002660  00000000  00000000  0014a960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00009810  00000000  00000000  0014cfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000335d9  00000000  00000000  001567d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00033d90  00000000  00000000  00189da9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013526c  00000000  00000000  001bdb39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006cb0  00000000  00000000  002f2da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <__aeabi_drsub>:
   b401c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4020:	e002      	b.n	b4028 <__adddf3>
   b4022:	bf00      	nop

000b4024 <__aeabi_dsub>:
   b4024:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b4028 <__adddf3>:
   b4028:	b530      	push	{r4, r5, lr}
   b402a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b402e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4032:	ea94 0f05 	teq	r4, r5
   b4036:	bf08      	it	eq
   b4038:	ea90 0f02 	teqeq	r0, r2
   b403c:	bf1f      	itttt	ne
   b403e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4042:	ea55 0c02 	orrsne.w	ip, r5, r2
   b4046:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b404e:	f000 80e2 	beq.w	b4216 <__adddf3+0x1ee>
   b4052:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b4056:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405a:	bfb8      	it	lt
   b405c:	426d      	neglt	r5, r5
   b405e:	dd0c      	ble.n	b407a <__adddf3+0x52>
   b4060:	442c      	add	r4, r5
   b4062:	ea80 0202 	eor.w	r2, r0, r2
   b4066:	ea81 0303 	eor.w	r3, r1, r3
   b406a:	ea82 0000 	eor.w	r0, r2, r0
   b406e:	ea83 0101 	eor.w	r1, r3, r1
   b4072:	ea80 0202 	eor.w	r2, r0, r2
   b4076:	ea81 0303 	eor.w	r3, r1, r3
   b407a:	2d36      	cmp	r5, #54	; 0x36
   b407c:	bf88      	it	hi
   b407e:	bd30      	pophi	{r4, r5, pc}
   b4080:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4084:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b4088:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b408c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4090:	d002      	beq.n	b4098 <__adddf3+0x70>
   b4092:	4240      	negs	r0, r0
   b4094:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4098:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b409c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a4:	d002      	beq.n	b40ac <__adddf3+0x84>
   b40a6:	4252      	negs	r2, r2
   b40a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40ac:	ea94 0f05 	teq	r4, r5
   b40b0:	f000 80a7 	beq.w	b4202 <__adddf3+0x1da>
   b40b4:	f1a4 0401 	sub.w	r4, r4, #1
   b40b8:	f1d5 0e20 	rsbs	lr, r5, #32
   b40bc:	db0d      	blt.n	b40da <__adddf3+0xb2>
   b40be:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c2:	fa22 f205 	lsr.w	r2, r2, r5
   b40c6:	1880      	adds	r0, r0, r2
   b40c8:	f141 0100 	adc.w	r1, r1, #0
   b40cc:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d0:	1880      	adds	r0, r0, r2
   b40d2:	fa43 f305 	asr.w	r3, r3, r5
   b40d6:	4159      	adcs	r1, r3
   b40d8:	e00e      	b.n	b40f8 <__adddf3+0xd0>
   b40da:	f1a5 0520 	sub.w	r5, r5, #32
   b40de:	f10e 0e20 	add.w	lr, lr, #32
   b40e2:	2a01      	cmp	r2, #1
   b40e4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40e8:	bf28      	it	cs
   b40ea:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40ee:	fa43 f305 	asr.w	r3, r3, r5
   b40f2:	18c0      	adds	r0, r0, r3
   b40f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b40fc:	d507      	bpl.n	b410e <__adddf3+0xe6>
   b40fe:	f04f 0e00 	mov.w	lr, #0
   b4102:	f1dc 0c00 	rsbs	ip, ip, #0
   b4106:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410a:	eb6e 0101 	sbc.w	r1, lr, r1
   b410e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4112:	d31b      	bcc.n	b414c <__adddf3+0x124>
   b4114:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b4118:	d30c      	bcc.n	b4134 <__adddf3+0x10c>
   b411a:	0849      	lsrs	r1, r1, #1
   b411c:	ea5f 0030 	movs.w	r0, r0, rrx
   b4120:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4124:	f104 0401 	add.w	r4, r4, #1
   b4128:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b412c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4130:	f080 809a 	bcs.w	b4268 <__adddf3+0x240>
   b4134:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b4138:	bf08      	it	eq
   b413a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b413e:	f150 0000 	adcs.w	r0, r0, #0
   b4142:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b4146:	ea41 0105 	orr.w	r1, r1, r5
   b414a:	bd30      	pop	{r4, r5, pc}
   b414c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4150:	4140      	adcs	r0, r0
   b4152:	eb41 0101 	adc.w	r1, r1, r1
   b4156:	3c01      	subs	r4, #1
   b4158:	bf28      	it	cs
   b415a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b415e:	d2e9      	bcs.n	b4134 <__adddf3+0x10c>
   b4160:	f091 0f00 	teq	r1, #0
   b4164:	bf04      	itt	eq
   b4166:	4601      	moveq	r1, r0
   b4168:	2000      	moveq	r0, #0
   b416a:	fab1 f381 	clz	r3, r1
   b416e:	bf08      	it	eq
   b4170:	3320      	addeq	r3, #32
   b4172:	f1a3 030b 	sub.w	r3, r3, #11
   b4176:	f1b3 0220 	subs.w	r2, r3, #32
   b417a:	da0c      	bge.n	b4196 <__adddf3+0x16e>
   b417c:	320c      	adds	r2, #12
   b417e:	dd08      	ble.n	b4192 <__adddf3+0x16a>
   b4180:	f102 0c14 	add.w	ip, r2, #20
   b4184:	f1c2 020c 	rsb	r2, r2, #12
   b4188:	fa01 f00c 	lsl.w	r0, r1, ip
   b418c:	fa21 f102 	lsr.w	r1, r1, r2
   b4190:	e00c      	b.n	b41ac <__adddf3+0x184>
   b4192:	f102 0214 	add.w	r2, r2, #20
   b4196:	bfd8      	it	le
   b4198:	f1c2 0c20 	rsble	ip, r2, #32
   b419c:	fa01 f102 	lsl.w	r1, r1, r2
   b41a0:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a4:	bfdc      	itt	le
   b41a6:	ea41 010c 	orrle.w	r1, r1, ip
   b41aa:	4090      	lslle	r0, r2
   b41ac:	1ae4      	subs	r4, r4, r3
   b41ae:	bfa2      	ittt	ge
   b41b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b4:	4329      	orrge	r1, r5
   b41b6:	bd30      	popge	{r4, r5, pc}
   b41b8:	ea6f 0404 	mvn.w	r4, r4
   b41bc:	3c1f      	subs	r4, #31
   b41be:	da1c      	bge.n	b41fa <__adddf3+0x1d2>
   b41c0:	340c      	adds	r4, #12
   b41c2:	dc0e      	bgt.n	b41e2 <__adddf3+0x1ba>
   b41c4:	f104 0414 	add.w	r4, r4, #20
   b41c8:	f1c4 0220 	rsb	r2, r4, #32
   b41cc:	fa20 f004 	lsr.w	r0, r0, r4
   b41d0:	fa01 f302 	lsl.w	r3, r1, r2
   b41d4:	ea40 0003 	orr.w	r0, r0, r3
   b41d8:	fa21 f304 	lsr.w	r3, r1, r4
   b41dc:	ea45 0103 	orr.w	r1, r5, r3
   b41e0:	bd30      	pop	{r4, r5, pc}
   b41e2:	f1c4 040c 	rsb	r4, r4, #12
   b41e6:	f1c4 0220 	rsb	r2, r4, #32
   b41ea:	fa20 f002 	lsr.w	r0, r0, r2
   b41ee:	fa01 f304 	lsl.w	r3, r1, r4
   b41f2:	ea40 0003 	orr.w	r0, r0, r3
   b41f6:	4629      	mov	r1, r5
   b41f8:	bd30      	pop	{r4, r5, pc}
   b41fa:	fa21 f004 	lsr.w	r0, r1, r4
   b41fe:	4629      	mov	r1, r5
   b4200:	bd30      	pop	{r4, r5, pc}
   b4202:	f094 0f00 	teq	r4, #0
   b4206:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420a:	bf06      	itte	eq
   b420c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4210:	3401      	addeq	r4, #1
   b4212:	3d01      	subne	r5, #1
   b4214:	e74e      	b.n	b40b4 <__adddf3+0x8c>
   b4216:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421a:	bf18      	it	ne
   b421c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4220:	d029      	beq.n	b4276 <__adddf3+0x24e>
   b4222:	ea94 0f05 	teq	r4, r5
   b4226:	bf08      	it	eq
   b4228:	ea90 0f02 	teqeq	r0, r2
   b422c:	d005      	beq.n	b423a <__adddf3+0x212>
   b422e:	ea54 0c00 	orrs.w	ip, r4, r0
   b4232:	bf04      	itt	eq
   b4234:	4619      	moveq	r1, r3
   b4236:	4610      	moveq	r0, r2
   b4238:	bd30      	pop	{r4, r5, pc}
   b423a:	ea91 0f03 	teq	r1, r3
   b423e:	bf1e      	ittt	ne
   b4240:	2100      	movne	r1, #0
   b4242:	2000      	movne	r0, #0
   b4244:	bd30      	popne	{r4, r5, pc}
   b4246:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424a:	d105      	bne.n	b4258 <__adddf3+0x230>
   b424c:	0040      	lsls	r0, r0, #1
   b424e:	4149      	adcs	r1, r1
   b4250:	bf28      	it	cs
   b4252:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b4256:	bd30      	pop	{r4, r5, pc}
   b4258:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b425c:	bf3c      	itt	cc
   b425e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4262:	bd30      	popcc	{r4, r5, pc}
   b4264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4268:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b426c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4270:	f04f 0000 	mov.w	r0, #0
   b4274:	bd30      	pop	{r4, r5, pc}
   b4276:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427a:	bf1a      	itte	ne
   b427c:	4619      	movne	r1, r3
   b427e:	4610      	movne	r0, r2
   b4280:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4284:	bf1c      	itt	ne
   b4286:	460b      	movne	r3, r1
   b4288:	4602      	movne	r2, r0
   b428a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b428e:	bf06      	itte	eq
   b4290:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4294:	ea91 0f03 	teqeq	r1, r3
   b4298:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b429c:	bd30      	pop	{r4, r5, pc}
   b429e:	bf00      	nop

000b42a0 <__aeabi_ui2d>:
   b42a0:	f090 0f00 	teq	r0, #0
   b42a4:	bf04      	itt	eq
   b42a6:	2100      	moveq	r1, #0
   b42a8:	4770      	bxeq	lr
   b42aa:	b530      	push	{r4, r5, lr}
   b42ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b4:	f04f 0500 	mov.w	r5, #0
   b42b8:	f04f 0100 	mov.w	r1, #0
   b42bc:	e750      	b.n	b4160 <__adddf3+0x138>
   b42be:	bf00      	nop

000b42c0 <__aeabi_i2d>:
   b42c0:	f090 0f00 	teq	r0, #0
   b42c4:	bf04      	itt	eq
   b42c6:	2100      	moveq	r1, #0
   b42c8:	4770      	bxeq	lr
   b42ca:	b530      	push	{r4, r5, lr}
   b42cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42d8:	bf48      	it	mi
   b42da:	4240      	negmi	r0, r0
   b42dc:	f04f 0100 	mov.w	r1, #0
   b42e0:	e73e      	b.n	b4160 <__adddf3+0x138>
   b42e2:	bf00      	nop

000b42e4 <__aeabi_f2d>:
   b42e4:	0042      	lsls	r2, r0, #1
   b42e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ea:	ea4f 0131 	mov.w	r1, r1, rrx
   b42ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f2:	bf1f      	itttt	ne
   b42f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b42fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4300:	4770      	bxne	lr
   b4302:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b4306:	bf08      	it	eq
   b4308:	4770      	bxeq	lr
   b430a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b430e:	bf04      	itt	eq
   b4310:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4314:	4770      	bxeq	lr
   b4316:	b530      	push	{r4, r5, lr}
   b4318:	f44f 7460 	mov.w	r4, #896	; 0x380
   b431c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4324:	e71c      	b.n	b4160 <__adddf3+0x138>
   b4326:	bf00      	nop

000b4328 <__aeabi_ul2d>:
   b4328:	ea50 0201 	orrs.w	r2, r0, r1
   b432c:	bf08      	it	eq
   b432e:	4770      	bxeq	lr
   b4330:	b530      	push	{r4, r5, lr}
   b4332:	f04f 0500 	mov.w	r5, #0
   b4336:	e00a      	b.n	b434e <__aeabi_l2d+0x16>

000b4338 <__aeabi_l2d>:
   b4338:	ea50 0201 	orrs.w	r2, r0, r1
   b433c:	bf08      	it	eq
   b433e:	4770      	bxeq	lr
   b4340:	b530      	push	{r4, r5, lr}
   b4342:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b4346:	d502      	bpl.n	b434e <__aeabi_l2d+0x16>
   b4348:	4240      	negs	r0, r0
   b434a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b434e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4352:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b4356:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435a:	f43f aed8 	beq.w	b410e <__adddf3+0xe6>
   b435e:	f04f 0203 	mov.w	r2, #3
   b4362:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4366:	bf18      	it	ne
   b4368:	3203      	addne	r2, #3
   b436a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436e:	bf18      	it	ne
   b4370:	3203      	addne	r2, #3
   b4372:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b4376:	f1c2 0320 	rsb	r3, r2, #32
   b437a:	fa00 fc03 	lsl.w	ip, r0, r3
   b437e:	fa20 f002 	lsr.w	r0, r0, r2
   b4382:	fa01 fe03 	lsl.w	lr, r1, r3
   b4386:	ea40 000e 	orr.w	r0, r0, lr
   b438a:	fa21 f102 	lsr.w	r1, r1, r2
   b438e:	4414      	add	r4, r2
   b4390:	e6bd      	b.n	b410e <__adddf3+0xe6>
   b4392:	bf00      	nop

000b4394 <__aeabi_dmul>:
   b4394:	b570      	push	{r4, r5, r6, lr}
   b4396:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b439e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a2:	bf1d      	ittte	ne
   b43a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43a8:	ea94 0f0c 	teqne	r4, ip
   b43ac:	ea95 0f0c 	teqne	r5, ip
   b43b0:	f000 f8de 	bleq	b4570 <__aeabi_dmul+0x1dc>
   b43b4:	442c      	add	r4, r5
   b43b6:	ea81 0603 	eor.w	r6, r1, r3
   b43ba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43be:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43c6:	bf18      	it	ne
   b43c8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d4:	d038      	beq.n	b4448 <__aeabi_dmul+0xb4>
   b43d6:	fba0 ce02 	umull	ip, lr, r0, r2
   b43da:	f04f 0500 	mov.w	r5, #0
   b43de:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43e6:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ea:	f04f 0600 	mov.w	r6, #0
   b43ee:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f2:	f09c 0f00 	teq	ip, #0
   b43f6:	bf18      	it	ne
   b43f8:	f04e 0e01 	orrne.w	lr, lr, #1
   b43fc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4400:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4404:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b4408:	d204      	bcs.n	b4414 <__aeabi_dmul+0x80>
   b440a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b440e:	416d      	adcs	r5, r5
   b4410:	eb46 0606 	adc.w	r6, r6, r6
   b4414:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b4418:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b441c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4420:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4424:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b4428:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b442c:	bf88      	it	hi
   b442e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4432:	d81e      	bhi.n	b4472 <__aeabi_dmul+0xde>
   b4434:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b4438:	bf08      	it	eq
   b443a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b443e:	f150 0000 	adcs.w	r0, r0, #0
   b4442:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b4446:	bd70      	pop	{r4, r5, r6, pc}
   b4448:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b444c:	ea46 0101 	orr.w	r1, r6, r1
   b4450:	ea40 0002 	orr.w	r0, r0, r2
   b4454:	ea81 0103 	eor.w	r1, r1, r3
   b4458:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b445c:	bfc2      	ittt	gt
   b445e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4462:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4466:	bd70      	popgt	{r4, r5, r6, pc}
   b4468:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b446c:	f04f 0e00 	mov.w	lr, #0
   b4470:	3c01      	subs	r4, #1
   b4472:	f300 80ab 	bgt.w	b45cc <__aeabi_dmul+0x238>
   b4476:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447a:	bfde      	ittt	le
   b447c:	2000      	movle	r0, #0
   b447e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4482:	bd70      	pople	{r4, r5, r6, pc}
   b4484:	f1c4 0400 	rsb	r4, r4, #0
   b4488:	3c20      	subs	r4, #32
   b448a:	da35      	bge.n	b44f8 <__aeabi_dmul+0x164>
   b448c:	340c      	adds	r4, #12
   b448e:	dc1b      	bgt.n	b44c8 <__aeabi_dmul+0x134>
   b4490:	f104 0414 	add.w	r4, r4, #20
   b4494:	f1c4 0520 	rsb	r5, r4, #32
   b4498:	fa00 f305 	lsl.w	r3, r0, r5
   b449c:	fa20 f004 	lsr.w	r0, r0, r4
   b44a0:	fa01 f205 	lsl.w	r2, r1, r5
   b44a4:	ea40 0002 	orr.w	r0, r0, r2
   b44a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b4:	fa21 f604 	lsr.w	r6, r1, r4
   b44b8:	eb42 0106 	adc.w	r1, r2, r6
   b44bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c0:	bf08      	it	eq
   b44c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44c6:	bd70      	pop	{r4, r5, r6, pc}
   b44c8:	f1c4 040c 	rsb	r4, r4, #12
   b44cc:	f1c4 0520 	rsb	r5, r4, #32
   b44d0:	fa00 f304 	lsl.w	r3, r0, r4
   b44d4:	fa20 f005 	lsr.w	r0, r0, r5
   b44d8:	fa01 f204 	lsl.w	r2, r1, r4
   b44dc:	ea40 0002 	orr.w	r0, r0, r2
   b44e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44e8:	f141 0100 	adc.w	r1, r1, #0
   b44ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f0:	bf08      	it	eq
   b44f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44f6:	bd70      	pop	{r4, r5, r6, pc}
   b44f8:	f1c4 0520 	rsb	r5, r4, #32
   b44fc:	fa00 f205 	lsl.w	r2, r0, r5
   b4500:	ea4e 0e02 	orr.w	lr, lr, r2
   b4504:	fa20 f304 	lsr.w	r3, r0, r4
   b4508:	fa01 f205 	lsl.w	r2, r1, r5
   b450c:	ea43 0302 	orr.w	r3, r3, r2
   b4510:	fa21 f004 	lsr.w	r0, r1, r4
   b4514:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4518:	fa21 f204 	lsr.w	r2, r1, r4
   b451c:	ea20 0002 	bic.w	r0, r0, r2
   b4520:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4524:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b4528:	bf08      	it	eq
   b452a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b452e:	bd70      	pop	{r4, r5, r6, pc}
   b4530:	f094 0f00 	teq	r4, #0
   b4534:	d10f      	bne.n	b4556 <__aeabi_dmul+0x1c2>
   b4536:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453a:	0040      	lsls	r0, r0, #1
   b453c:	eb41 0101 	adc.w	r1, r1, r1
   b4540:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4544:	bf08      	it	eq
   b4546:	3c01      	subeq	r4, #1
   b4548:	d0f7      	beq.n	b453a <__aeabi_dmul+0x1a6>
   b454a:	ea41 0106 	orr.w	r1, r1, r6
   b454e:	f095 0f00 	teq	r5, #0
   b4552:	bf18      	it	ne
   b4554:	4770      	bxne	lr
   b4556:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455a:	0052      	lsls	r2, r2, #1
   b455c:	eb43 0303 	adc.w	r3, r3, r3
   b4560:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4564:	bf08      	it	eq
   b4566:	3d01      	subeq	r5, #1
   b4568:	d0f7      	beq.n	b455a <__aeabi_dmul+0x1c6>
   b456a:	ea43 0306 	orr.w	r3, r3, r6
   b456e:	4770      	bx	lr
   b4570:	ea94 0f0c 	teq	r4, ip
   b4574:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b4578:	bf18      	it	ne
   b457a:	ea95 0f0c 	teqne	r5, ip
   b457e:	d00c      	beq.n	b459a <__aeabi_dmul+0x206>
   b4580:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4584:	bf18      	it	ne
   b4586:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458a:	d1d1      	bne.n	b4530 <__aeabi_dmul+0x19c>
   b458c:	ea81 0103 	eor.w	r1, r1, r3
   b4590:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4594:	f04f 0000 	mov.w	r0, #0
   b4598:	bd70      	pop	{r4, r5, r6, pc}
   b459a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b459e:	bf06      	itte	eq
   b45a0:	4610      	moveq	r0, r2
   b45a2:	4619      	moveq	r1, r3
   b45a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45a8:	d019      	beq.n	b45de <__aeabi_dmul+0x24a>
   b45aa:	ea94 0f0c 	teq	r4, ip
   b45ae:	d102      	bne.n	b45b6 <__aeabi_dmul+0x222>
   b45b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b4:	d113      	bne.n	b45de <__aeabi_dmul+0x24a>
   b45b6:	ea95 0f0c 	teq	r5, ip
   b45ba:	d105      	bne.n	b45c8 <__aeabi_dmul+0x234>
   b45bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c0:	bf1c      	itt	ne
   b45c2:	4610      	movne	r0, r2
   b45c4:	4619      	movne	r1, r3
   b45c6:	d10a      	bne.n	b45de <__aeabi_dmul+0x24a>
   b45c8:	ea81 0103 	eor.w	r1, r1, r3
   b45cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45d8:	f04f 0000 	mov.w	r0, #0
   b45dc:	bd70      	pop	{r4, r5, r6, pc}
   b45de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45e6:	bd70      	pop	{r4, r5, r6, pc}

000b45e8 <__aeabi_ddiv>:
   b45e8:	b570      	push	{r4, r5, r6, lr}
   b45ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45f6:	bf1d      	ittte	ne
   b45f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b45fc:	ea94 0f0c 	teqne	r4, ip
   b4600:	ea95 0f0c 	teqne	r5, ip
   b4604:	f000 f8a7 	bleq	b4756 <__aeabi_ddiv+0x16e>
   b4608:	eba4 0405 	sub.w	r4, r4, r5
   b460c:	ea81 0e03 	eor.w	lr, r1, r3
   b4610:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4614:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b4618:	f000 8088 	beq.w	b472c <__aeabi_ddiv+0x144>
   b461c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4620:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4624:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b4628:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b462c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4630:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4634:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b4638:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b463c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4640:	429d      	cmp	r5, r3
   b4642:	bf08      	it	eq
   b4644:	4296      	cmpeq	r6, r2
   b4646:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b464e:	d202      	bcs.n	b4656 <__aeabi_ddiv+0x6e>
   b4650:	085b      	lsrs	r3, r3, #1
   b4652:	ea4f 0232 	mov.w	r2, r2, rrx
   b4656:	1ab6      	subs	r6, r6, r2
   b4658:	eb65 0503 	sbc.w	r5, r5, r3
   b465c:	085b      	lsrs	r3, r3, #1
   b465e:	ea4f 0232 	mov.w	r2, r2, rrx
   b4662:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b4666:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466a:	ebb6 0e02 	subs.w	lr, r6, r2
   b466e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4672:	bf22      	ittt	cs
   b4674:	1ab6      	subcs	r6, r6, r2
   b4676:	4675      	movcs	r5, lr
   b4678:	ea40 000c 	orrcs.w	r0, r0, ip
   b467c:	085b      	lsrs	r3, r3, #1
   b467e:	ea4f 0232 	mov.w	r2, r2, rrx
   b4682:	ebb6 0e02 	subs.w	lr, r6, r2
   b4686:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468a:	bf22      	ittt	cs
   b468c:	1ab6      	subcs	r6, r6, r2
   b468e:	4675      	movcs	r5, lr
   b4690:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4694:	085b      	lsrs	r3, r3, #1
   b4696:	ea4f 0232 	mov.w	r2, r2, rrx
   b469a:	ebb6 0e02 	subs.w	lr, r6, r2
   b469e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a2:	bf22      	ittt	cs
   b46a4:	1ab6      	subcs	r6, r6, r2
   b46a6:	4675      	movcs	r5, lr
   b46a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46ac:	085b      	lsrs	r3, r3, #1
   b46ae:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b2:	ebb6 0e02 	subs.w	lr, r6, r2
   b46b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46ba:	bf22      	ittt	cs
   b46bc:	1ab6      	subcs	r6, r6, r2
   b46be:	4675      	movcs	r5, lr
   b46c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c4:	ea55 0e06 	orrs.w	lr, r5, r6
   b46c8:	d018      	beq.n	b46fc <__aeabi_ddiv+0x114>
   b46ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46e6:	d1c0      	bne.n	b466a <__aeabi_ddiv+0x82>
   b46e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46ec:	d10b      	bne.n	b4706 <__aeabi_ddiv+0x11e>
   b46ee:	ea41 0100 	orr.w	r1, r1, r0
   b46f2:	f04f 0000 	mov.w	r0, #0
   b46f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fa:	e7b6      	b.n	b466a <__aeabi_ddiv+0x82>
   b46fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4700:	bf04      	itt	eq
   b4702:	4301      	orreq	r1, r0
   b4704:	2000      	moveq	r0, #0
   b4706:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470a:	bf88      	it	hi
   b470c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4710:	f63f aeaf 	bhi.w	b4472 <__aeabi_dmul+0xde>
   b4714:	ebb5 0c03 	subs.w	ip, r5, r3
   b4718:	bf04      	itt	eq
   b471a:	ebb6 0c02 	subseq.w	ip, r6, r2
   b471e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4722:	f150 0000 	adcs.w	r0, r0, #0
   b4726:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472a:	bd70      	pop	{r4, r5, r6, pc}
   b472c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4730:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4734:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b4738:	bfc2      	ittt	gt
   b473a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b473e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4742:	bd70      	popgt	{r4, r5, r6, pc}
   b4744:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4748:	f04f 0e00 	mov.w	lr, #0
   b474c:	3c01      	subs	r4, #1
   b474e:	e690      	b.n	b4472 <__aeabi_dmul+0xde>
   b4750:	ea45 0e06 	orr.w	lr, r5, r6
   b4754:	e68d      	b.n	b4472 <__aeabi_dmul+0xde>
   b4756:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475a:	ea94 0f0c 	teq	r4, ip
   b475e:	bf08      	it	eq
   b4760:	ea95 0f0c 	teqeq	r5, ip
   b4764:	f43f af3b 	beq.w	b45de <__aeabi_dmul+0x24a>
   b4768:	ea94 0f0c 	teq	r4, ip
   b476c:	d10a      	bne.n	b4784 <__aeabi_ddiv+0x19c>
   b476e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4772:	f47f af34 	bne.w	b45de <__aeabi_dmul+0x24a>
   b4776:	ea95 0f0c 	teq	r5, ip
   b477a:	f47f af25 	bne.w	b45c8 <__aeabi_dmul+0x234>
   b477e:	4610      	mov	r0, r2
   b4780:	4619      	mov	r1, r3
   b4782:	e72c      	b.n	b45de <__aeabi_dmul+0x24a>
   b4784:	ea95 0f0c 	teq	r5, ip
   b4788:	d106      	bne.n	b4798 <__aeabi_ddiv+0x1b0>
   b478a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b478e:	f43f aefd 	beq.w	b458c <__aeabi_dmul+0x1f8>
   b4792:	4610      	mov	r0, r2
   b4794:	4619      	mov	r1, r3
   b4796:	e722      	b.n	b45de <__aeabi_dmul+0x24a>
   b4798:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b479c:	bf18      	it	ne
   b479e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a2:	f47f aec5 	bne.w	b4530 <__aeabi_dmul+0x19c>
   b47a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47aa:	f47f af0d 	bne.w	b45c8 <__aeabi_dmul+0x234>
   b47ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b2:	f47f aeeb 	bne.w	b458c <__aeabi_dmul+0x1f8>
   b47b6:	e712      	b.n	b45de <__aeabi_dmul+0x24a>

000b47b8 <__gedf2>:
   b47b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b47bc:	e006      	b.n	b47cc <__cmpdf2+0x4>
   b47be:	bf00      	nop

000b47c0 <__ledf2>:
   b47c0:	f04f 0c01 	mov.w	ip, #1
   b47c4:	e002      	b.n	b47cc <__cmpdf2+0x4>
   b47c6:	bf00      	nop

000b47c8 <__cmpdf2>:
   b47c8:	f04f 0c01 	mov.w	ip, #1
   b47cc:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47dc:	bf18      	it	ne
   b47de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e2:	d01b      	beq.n	b481c <__cmpdf2+0x54>
   b47e4:	b001      	add	sp, #4
   b47e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ea:	bf0c      	ite	eq
   b47ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f0:	ea91 0f03 	teqne	r1, r3
   b47f4:	bf02      	ittt	eq
   b47f6:	ea90 0f02 	teqeq	r0, r2
   b47fa:	2000      	moveq	r0, #0
   b47fc:	4770      	bxeq	lr
   b47fe:	f110 0f00 	cmn.w	r0, #0
   b4802:	ea91 0f03 	teq	r1, r3
   b4806:	bf58      	it	pl
   b4808:	4299      	cmppl	r1, r3
   b480a:	bf08      	it	eq
   b480c:	4290      	cmpeq	r0, r2
   b480e:	bf2c      	ite	cs
   b4810:	17d8      	asrcs	r0, r3, #31
   b4812:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b4816:	f040 0001 	orr.w	r0, r0, #1
   b481a:	4770      	bx	lr
   b481c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4820:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4824:	d102      	bne.n	b482c <__cmpdf2+0x64>
   b4826:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482a:	d107      	bne.n	b483c <__cmpdf2+0x74>
   b482c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4830:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4834:	d1d6      	bne.n	b47e4 <__cmpdf2+0x1c>
   b4836:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483a:	d0d3      	beq.n	b47e4 <__cmpdf2+0x1c>
   b483c:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4840:	4770      	bx	lr
   b4842:	bf00      	nop

000b4844 <__aeabi_cdrcmple>:
   b4844:	4684      	mov	ip, r0
   b4846:	4610      	mov	r0, r2
   b4848:	4662      	mov	r2, ip
   b484a:	468c      	mov	ip, r1
   b484c:	4619      	mov	r1, r3
   b484e:	4663      	mov	r3, ip
   b4850:	e000      	b.n	b4854 <__aeabi_cdcmpeq>
   b4852:	bf00      	nop

000b4854 <__aeabi_cdcmpeq>:
   b4854:	b501      	push	{r0, lr}
   b4856:	f7ff ffb7 	bl	b47c8 <__cmpdf2>
   b485a:	2800      	cmp	r0, #0
   b485c:	bf48      	it	mi
   b485e:	f110 0f00 	cmnmi.w	r0, #0
   b4862:	bd01      	pop	{r0, pc}

000b4864 <__aeabi_dcmpeq>:
   b4864:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4868:	f7ff fff4 	bl	b4854 <__aeabi_cdcmpeq>
   b486c:	bf0c      	ite	eq
   b486e:	2001      	moveq	r0, #1
   b4870:	2000      	movne	r0, #0
   b4872:	f85d fb08 	ldr.w	pc, [sp], #8
   b4876:	bf00      	nop

000b4878 <__aeabi_dcmplt>:
   b4878:	f84d ed08 	str.w	lr, [sp, #-8]!
   b487c:	f7ff ffea 	bl	b4854 <__aeabi_cdcmpeq>
   b4880:	bf34      	ite	cc
   b4882:	2001      	movcc	r0, #1
   b4884:	2000      	movcs	r0, #0
   b4886:	f85d fb08 	ldr.w	pc, [sp], #8
   b488a:	bf00      	nop

000b488c <__aeabi_dcmple>:
   b488c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4890:	f7ff ffe0 	bl	b4854 <__aeabi_cdcmpeq>
   b4894:	bf94      	ite	ls
   b4896:	2001      	movls	r0, #1
   b4898:	2000      	movhi	r0, #0
   b489a:	f85d fb08 	ldr.w	pc, [sp], #8
   b489e:	bf00      	nop

000b48a0 <__aeabi_dcmpge>:
   b48a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a4:	f7ff ffce 	bl	b4844 <__aeabi_cdrcmple>
   b48a8:	bf94      	ite	ls
   b48aa:	2001      	movls	r0, #1
   b48ac:	2000      	movhi	r0, #0
   b48ae:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b2:	bf00      	nop

000b48b4 <__aeabi_dcmpgt>:
   b48b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48b8:	f7ff ffc4 	bl	b4844 <__aeabi_cdrcmple>
   b48bc:	bf34      	ite	cc
   b48be:	2001      	movcc	r0, #1
   b48c0:	2000      	movcs	r0, #0
   b48c2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48c6:	bf00      	nop

000b48c8 <__aeabi_dcmpun>:
   b48c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d0:	d102      	bne.n	b48d8 <__aeabi_dcmpun+0x10>
   b48d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48d6:	d10a      	bne.n	b48ee <__aeabi_dcmpun+0x26>
   b48d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e0:	d102      	bne.n	b48e8 <__aeabi_dcmpun+0x20>
   b48e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48e6:	d102      	bne.n	b48ee <__aeabi_dcmpun+0x26>
   b48e8:	f04f 0000 	mov.w	r0, #0
   b48ec:	4770      	bx	lr
   b48ee:	f04f 0001 	mov.w	r0, #1
   b48f2:	4770      	bx	lr

000b48f4 <__aeabi_d2iz>:
   b48f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b48fc:	d215      	bcs.n	b492a <__aeabi_d2iz+0x36>
   b48fe:	d511      	bpl.n	b4924 <__aeabi_d2iz+0x30>
   b4900:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b4908:	d912      	bls.n	b4930 <__aeabi_d2iz+0x3c>
   b490a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b490e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b4916:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b491a:	fa23 f002 	lsr.w	r0, r3, r2
   b491e:	bf18      	it	ne
   b4920:	4240      	negne	r0, r0
   b4922:	4770      	bx	lr
   b4924:	f04f 0000 	mov.w	r0, #0
   b4928:	4770      	bx	lr
   b492a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b492e:	d105      	bne.n	b493c <__aeabi_d2iz+0x48>
   b4930:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b4934:	bf08      	it	eq
   b4936:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b493a:	4770      	bx	lr
   b493c:	f04f 0000 	mov.w	r0, #0
   b4940:	4770      	bx	lr
   b4942:	bf00      	nop

000b4944 <__aeabi_d2uiz>:
   b4944:	004a      	lsls	r2, r1, #1
   b4946:	d211      	bcs.n	b496c <__aeabi_d2uiz+0x28>
   b4948:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b494c:	d211      	bcs.n	b4972 <__aeabi_d2uiz+0x2e>
   b494e:	d50d      	bpl.n	b496c <__aeabi_d2uiz+0x28>
   b4950:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4954:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b4958:	d40e      	bmi.n	b4978 <__aeabi_d2uiz+0x34>
   b495a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b495e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4962:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b4966:	fa23 f002 	lsr.w	r0, r3, r2
   b496a:	4770      	bx	lr
   b496c:	f04f 0000 	mov.w	r0, #0
   b4970:	4770      	bx	lr
   b4972:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4976:	d102      	bne.n	b497e <__aeabi_d2uiz+0x3a>
   b4978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b497c:	4770      	bx	lr
   b497e:	f04f 0000 	mov.w	r0, #0
   b4982:	4770      	bx	lr

000b4984 <strlen>:
   b4984:	4603      	mov	r3, r0
   b4986:	f813 2b01 	ldrb.w	r2, [r3], #1
   b498a:	2a00      	cmp	r2, #0
   b498c:	d1fb      	bne.n	b4986 <strlen+0x2>
   b498e:	1a18      	subs	r0, r3, r0
   b4990:	3801      	subs	r0, #1
   b4992:	4770      	bx	lr

000b4994 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4994:	4809      	ldr	r0, [pc, #36]	; (b49bc <module_user_pre_init+0x28>)
   b4996:	490a      	ldr	r1, [pc, #40]	; (b49c0 <module_user_pre_init+0x2c>)
   b4998:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b499a:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b499c:	d005      	beq.n	b49aa <module_user_pre_init+0x16>
   b499e:	4a09      	ldr	r2, [pc, #36]	; (b49c4 <module_user_pre_init+0x30>)
   b49a0:	4282      	cmp	r2, r0
   b49a2:	d002      	beq.n	b49aa <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b49a4:	1a12      	subs	r2, r2, r0
   b49a6:	f000 ffef 	bl	b5988 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b49aa:	4807      	ldr	r0, [pc, #28]	; (b49c8 <module_user_pre_init+0x34>)
   b49ac:	4a07      	ldr	r2, [pc, #28]	; (b49cc <module_user_pre_init+0x38>)
   b49ae:	2100      	movs	r1, #0
   b49b0:	1a12      	subs	r2, r2, r0
   b49b2:	f000 fff7 	bl	b59a4 <memset>
    return &link_global_data_start;
}
   b49b6:	4801      	ldr	r0, [pc, #4]	; (b49bc <module_user_pre_init+0x28>)
   b49b8:	bd08      	pop	{r3, pc}
   b49ba:	bf00      	nop
   b49bc:	2003e63c 	.word	0x2003e63c
   b49c0:	000b5d2c 	.word	0x000b5d2c
   b49c4:	2003e6a8 	.word	0x2003e6a8
   b49c8:	2003e6a8 	.word	0x2003e6a8
   b49cc:	2003e7f0 	.word	0x2003e7f0

000b49d0 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b49d0:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b49d2:	4e07      	ldr	r6, [pc, #28]	; (b49f0 <module_user_init+0x20>)
   b49d4:	4c07      	ldr	r4, [pc, #28]	; (b49f4 <module_user_init+0x24>)
    module_user_init_hook();
   b49d6:	f000 feb7 	bl	b5748 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b49da:	1ba4      	subs	r4, r4, r6
   b49dc:	08a4      	lsrs	r4, r4, #2
   b49de:	2500      	movs	r5, #0
   b49e0:	42ac      	cmp	r4, r5
   b49e2:	d100      	bne.n	b49e6 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b49e4:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b49e6:	f856 3b04 	ldr.w	r3, [r6], #4
   b49ea:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b49ec:	3501      	adds	r5, #1
   b49ee:	e7f7      	b.n	b49e0 <module_user_init+0x10>
   b49f0:	000b5ce4 	.word	0x000b5ce4
   b49f4:	000b5d08 	.word	0x000b5d08

000b49f8 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b49f8:	f000 b813 	b.w	b4a22 <setup>

000b49fc <module_user_loop>:
}

void module_user_loop() {
   b49fc:	b508      	push	{r3, lr}
    loop();
   b49fe:	f000 f821 	bl	b4a44 <loop>
    _post_loop();
}
   b4a02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4a06:	f000 be57 	b.w	b56b8 <_post_loop>

000b4a0a <_Znaj>:
   b4a0a:	f000 b9d9 	b.w	b4dc0 <malloc>

000b4a0e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4a0e:	f000 b9df 	b.w	b4dd0 <free>

000b4a12 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4a12:	7800      	ldrb	r0, [r0, #0]
   b4a14:	fab0 f080 	clz	r0, r0
   b4a18:	0940      	lsrs	r0, r0, #5
   b4a1a:	4770      	bx	lr

000b4a1c <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4a1c:	2301      	movs	r3, #1
   b4a1e:	7003      	strb	r3, [r0, #0]
   b4a20:	4770      	bx	lr

000b4a22 <setup>:
SYSTEM_MODE(MANUAL);
SYSTEM_THREAD(ENABLED);
void setup() {
   b4a22:	b508      	push	{r3, lr}
  pinMode(A5, INPUT);
   b4a24:	2100      	movs	r1, #0
   b4a26:	200e      	movs	r0, #14
   b4a28:	f000 fefe 	bl	b5828 <pinMode>
  pinMode(D5, OUTPUT);
   b4a2c:	2101      	movs	r1, #1
   b4a2e:	2005      	movs	r0, #5
   b4a30:	f000 fefa 	bl	b5828 <pinMode>
  Serial.begin(9600);
   b4a34:	f000 fdba 	bl	b55ac <_Z16_fetch_usbserialv>
}
   b4a38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.begin(9600);
   b4a3c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4a40:	f000 bda8 	b.w	b5594 <_ZN9USBSerial5beginEl>

000b4a44 <loop>:
float volts;
void loop() {
   b4a44:	b510      	push	{r4, lr}
  volts = analogRead(A5);
   b4a46:	200e      	movs	r0, #14
   b4a48:	f000 feff 	bl	b584a <analogRead>
   b4a4c:	ee07 0a90 	vmov	s15, r0
   b4a50:	4c06      	ldr	r4, [pc, #24]	; (b4a6c <loop+0x28>)
   b4a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4a56:	edc4 7a00 	vstr	s15, [r4]
  Serial.println(volts);
   b4a5a:	f000 fda7 	bl	b55ac <_Z16_fetch_usbserialv>
   b4a5e:	ed94 0a00 	vldr	s0, [r4]
   b4a62:	2102      	movs	r1, #2
   b4a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial.println(volts);
   b4a68:	f000 bcb5 	b.w	b53d6 <_ZN5Print7printlnEfi>
   b4a6c:	2003e6b4 	.word	0x2003e6b4

000b4a70 <_GLOBAL__sub_I_SystemMode>:
   b4a70:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4a72:	4b07      	ldr	r3, [pc, #28]	; (b4a90 <_GLOBAL__sub_I_SystemMode+0x20>)
    SleepResult() {}
   b4a74:	4a07      	ldr	r2, [pc, #28]	; (b4a94 <_GLOBAL__sub_I_SystemMode+0x24>)
   b4a76:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4a78:	2400      	movs	r4, #0
   b4a7a:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4a7e:	2003      	movs	r0, #3
   b4a80:	f000 f912 	bl	b4ca8 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b4a84:	4621      	mov	r1, r4
   b4a86:	2001      	movs	r0, #1
   b4a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_THREAD(ENABLED);
   b4a8c:	f000 b914 	b.w	b4cb8 <system_thread_set_state>
   b4a90:	2003e6a8 	.word	0x2003e6a8
   b4a94:	ffff0000 	.word	0xffff0000

000b4a98 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4a98:	b508      	push	{r3, lr}
   b4a9a:	4b02      	ldr	r3, [pc, #8]	; (b4aa4 <os_mutex_recursive_create+0xc>)
   b4a9c:	681b      	ldr	r3, [r3, #0]
   b4a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4aa0:	9301      	str	r3, [sp, #4]
   b4aa2:	bd08      	pop	{r3, pc}
   b4aa4:	00030248 	.word	0x00030248

000b4aa8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4aa8:	b508      	push	{r3, lr}
   b4aaa:	4b02      	ldr	r3, [pc, #8]	; (b4ab4 <HAL_RNG_GetRandomNumber+0xc>)
   b4aac:	681b      	ldr	r3, [r3, #0]
   b4aae:	685b      	ldr	r3, [r3, #4]
   b4ab0:	9301      	str	r3, [sp, #4]
   b4ab2:	bd08      	pop	{r3, pc}
   b4ab4:	00030218 	.word	0x00030218

000b4ab8 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4ab8:	b508      	push	{r3, lr}
   b4aba:	4b02      	ldr	r3, [pc, #8]	; (b4ac4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4abc:	681b      	ldr	r3, [r3, #0]
   b4abe:	695b      	ldr	r3, [r3, #20]
   b4ac0:	9301      	str	r3, [sp, #4]
   b4ac2:	bd08      	pop	{r3, pc}
   b4ac4:	00030218 	.word	0x00030218

000b4ac8 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b4ac8:	b508      	push	{r3, lr}
   b4aca:	4b02      	ldr	r3, [pc, #8]	; (b4ad4 <hal_pin_validate_function+0xc>)
   b4acc:	681b      	ldr	r3, [r3, #0]
   b4ace:	685b      	ldr	r3, [r3, #4]
   b4ad0:	9301      	str	r3, [sp, #4]
   b4ad2:	bd08      	pop	{r3, pc}
   b4ad4:	0003022c 	.word	0x0003022c

000b4ad8 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b4ad8:	b508      	push	{r3, lr}
   b4ada:	4b02      	ldr	r3, [pc, #8]	; (b4ae4 <hal_gpio_mode+0xc>)
   b4adc:	681b      	ldr	r3, [r3, #0]
   b4ade:	689b      	ldr	r3, [r3, #8]
   b4ae0:	9301      	str	r3, [sp, #4]
   b4ae2:	bd08      	pop	{r3, pc}
   b4ae4:	0003022c 	.word	0x0003022c

000b4ae8 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b4ae8:	b508      	push	{r3, lr}
   b4aea:	4b02      	ldr	r3, [pc, #8]	; (b4af4 <hal_adc_read+0xc>)
   b4aec:	681b      	ldr	r3, [r3, #0]
   b4aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4af0:	9301      	str	r3, [sp, #4]
   b4af2:	bd08      	pop	{r3, pc}
   b4af4:	0003022c 	.word	0x0003022c

000b4af8 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4af8:	b508      	push	{r3, lr}
   b4afa:	4b02      	ldr	r3, [pc, #8]	; (b4b04 <hal_i2c_write+0xc>)
   b4afc:	681b      	ldr	r3, [r3, #0]
   b4afe:	6a1b      	ldr	r3, [r3, #32]
   b4b00:	9301      	str	r3, [sp, #4]
   b4b02:	bd08      	pop	{r3, pc}
   b4b04:	00030228 	.word	0x00030228

000b4b08 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4b08:	b508      	push	{r3, lr}
   b4b0a:	4b02      	ldr	r3, [pc, #8]	; (b4b14 <hal_i2c_available+0xc>)
   b4b0c:	681b      	ldr	r3, [r3, #0]
   b4b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4b10:	9301      	str	r3, [sp, #4]
   b4b12:	bd08      	pop	{r3, pc}
   b4b14:	00030228 	.word	0x00030228

000b4b18 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4b18:	b508      	push	{r3, lr}
   b4b1a:	4b02      	ldr	r3, [pc, #8]	; (b4b24 <hal_i2c_read+0xc>)
   b4b1c:	681b      	ldr	r3, [r3, #0]
   b4b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4b20:	9301      	str	r3, [sp, #4]
   b4b22:	bd08      	pop	{r3, pc}
   b4b24:	00030228 	.word	0x00030228

000b4b28 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4b28:	b508      	push	{r3, lr}
   b4b2a:	4b02      	ldr	r3, [pc, #8]	; (b4b34 <hal_i2c_peek+0xc>)
   b4b2c:	681b      	ldr	r3, [r3, #0]
   b4b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4b30:	9301      	str	r3, [sp, #4]
   b4b32:	bd08      	pop	{r3, pc}
   b4b34:	00030228 	.word	0x00030228

000b4b38 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4b38:	b508      	push	{r3, lr}
   b4b3a:	4b02      	ldr	r3, [pc, #8]	; (b4b44 <hal_i2c_flush+0xc>)
   b4b3c:	681b      	ldr	r3, [r3, #0]
   b4b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4b40:	9301      	str	r3, [sp, #4]
   b4b42:	bd08      	pop	{r3, pc}
   b4b44:	00030228 	.word	0x00030228

000b4b48 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4b48:	b508      	push	{r3, lr}
   b4b4a:	4b02      	ldr	r3, [pc, #8]	; (b4b54 <hal_i2c_is_enabled+0xc>)
   b4b4c:	681b      	ldr	r3, [r3, #0]
   b4b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4b50:	9301      	str	r3, [sp, #4]
   b4b52:	bd08      	pop	{r3, pc}
   b4b54:	00030228 	.word	0x00030228

000b4b58 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4b58:	b508      	push	{r3, lr}
   b4b5a:	4b02      	ldr	r3, [pc, #8]	; (b4b64 <hal_i2c_init+0xc>)
   b4b5c:	681b      	ldr	r3, [r3, #0]
   b4b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4b60:	9301      	str	r3, [sp, #4]
   b4b62:	bd08      	pop	{r3, pc}
   b4b64:	00030228 	.word	0x00030228

000b4b68 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4b68:	b508      	push	{r3, lr}
   b4b6a:	4b02      	ldr	r3, [pc, #8]	; (b4b74 <inet_inet_ntop+0xc>)
   b4b6c:	681b      	ldr	r3, [r3, #0]
   b4b6e:	695b      	ldr	r3, [r3, #20]
   b4b70:	9301      	str	r3, [sp, #4]
   b4b72:	bd08      	pop	{r3, pc}
   b4b74:	00030264 	.word	0x00030264

000b4b78 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4b78:	b508      	push	{r3, lr}
   b4b7a:	4b02      	ldr	r3, [pc, #8]	; (b4b84 <netdb_freeaddrinfo+0xc>)
   b4b7c:	681b      	ldr	r3, [r3, #0]
   b4b7e:	689b      	ldr	r3, [r3, #8]
   b4b80:	9301      	str	r3, [sp, #4]
   b4b82:	bd08      	pop	{r3, pc}
   b4b84:	00030268 	.word	0x00030268

000b4b88 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4b88:	b508      	push	{r3, lr}
   b4b8a:	4b02      	ldr	r3, [pc, #8]	; (b4b94 <netdb_getaddrinfo+0xc>)
   b4b8c:	681b      	ldr	r3, [r3, #0]
   b4b8e:	68db      	ldr	r3, [r3, #12]
   b4b90:	9301      	str	r3, [sp, #4]
   b4b92:	bd08      	pop	{r3, pc}
   b4b94:	00030268 	.word	0x00030268

000b4b98 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4b98:	b508      	push	{r3, lr}
   b4b9a:	4b02      	ldr	r3, [pc, #8]	; (b4ba4 <hal_spi_init+0xc>)
   b4b9c:	681b      	ldr	r3, [r3, #0]
   b4b9e:	69db      	ldr	r3, [r3, #28]
   b4ba0:	9301      	str	r3, [sp, #4]
   b4ba2:	bd08      	pop	{r3, pc}
   b4ba4:	00030230 	.word	0x00030230

000b4ba8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4ba8:	b508      	push	{r3, lr}
   b4baa:	4b02      	ldr	r3, [pc, #8]	; (b4bb4 <hal_spi_is_enabled+0xc>)
   b4bac:	681b      	ldr	r3, [r3, #0]
   b4bae:	6a1b      	ldr	r3, [r3, #32]
   b4bb0:	9301      	str	r3, [sp, #4]
   b4bb2:	bd08      	pop	{r3, pc}
   b4bb4:	00030230 	.word	0x00030230

000b4bb8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4bb8:	b508      	push	{r3, lr}
   b4bba:	4b02      	ldr	r3, [pc, #8]	; (b4bc4 <hal_usart_write+0xc>)
   b4bbc:	681b      	ldr	r3, [r3, #0]
   b4bbe:	68db      	ldr	r3, [r3, #12]
   b4bc0:	9301      	str	r3, [sp, #4]
   b4bc2:	bd08      	pop	{r3, pc}
   b4bc4:	0003023c 	.word	0x0003023c

000b4bc8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4bc8:	b508      	push	{r3, lr}
   b4bca:	4b02      	ldr	r3, [pc, #8]	; (b4bd4 <hal_usart_available+0xc>)
   b4bcc:	681b      	ldr	r3, [r3, #0]
   b4bce:	691b      	ldr	r3, [r3, #16]
   b4bd0:	9301      	str	r3, [sp, #4]
   b4bd2:	bd08      	pop	{r3, pc}
   b4bd4:	0003023c 	.word	0x0003023c

000b4bd8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4bd8:	b508      	push	{r3, lr}
   b4bda:	4b02      	ldr	r3, [pc, #8]	; (b4be4 <hal_usart_read+0xc>)
   b4bdc:	681b      	ldr	r3, [r3, #0]
   b4bde:	695b      	ldr	r3, [r3, #20]
   b4be0:	9301      	str	r3, [sp, #4]
   b4be2:	bd08      	pop	{r3, pc}
   b4be4:	0003023c 	.word	0x0003023c

000b4be8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4be8:	b508      	push	{r3, lr}
   b4bea:	4b02      	ldr	r3, [pc, #8]	; (b4bf4 <hal_usart_peek+0xc>)
   b4bec:	681b      	ldr	r3, [r3, #0]
   b4bee:	699b      	ldr	r3, [r3, #24]
   b4bf0:	9301      	str	r3, [sp, #4]
   b4bf2:	bd08      	pop	{r3, pc}
   b4bf4:	0003023c 	.word	0x0003023c

000b4bf8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4bf8:	b508      	push	{r3, lr}
   b4bfa:	4b02      	ldr	r3, [pc, #8]	; (b4c04 <hal_usart_flush+0xc>)
   b4bfc:	681b      	ldr	r3, [r3, #0]
   b4bfe:	69db      	ldr	r3, [r3, #28]
   b4c00:	9301      	str	r3, [sp, #4]
   b4c02:	bd08      	pop	{r3, pc}
   b4c04:	0003023c 	.word	0x0003023c

000b4c08 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4c08:	b508      	push	{r3, lr}
   b4c0a:	4b02      	ldr	r3, [pc, #8]	; (b4c14 <hal_usart_is_enabled+0xc>)
   b4c0c:	681b      	ldr	r3, [r3, #0]
   b4c0e:	6a1b      	ldr	r3, [r3, #32]
   b4c10:	9301      	str	r3, [sp, #4]
   b4c12:	bd08      	pop	{r3, pc}
   b4c14:	0003023c 	.word	0x0003023c

000b4c18 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4c18:	b508      	push	{r3, lr}
   b4c1a:	4b02      	ldr	r3, [pc, #8]	; (b4c24 <hal_usart_available_data_for_write+0xc>)
   b4c1c:	681b      	ldr	r3, [r3, #0]
   b4c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4c20:	9301      	str	r3, [sp, #4]
   b4c22:	bd08      	pop	{r3, pc}
   b4c24:	0003023c 	.word	0x0003023c

000b4c28 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4c28:	b508      	push	{r3, lr}
   b4c2a:	4b02      	ldr	r3, [pc, #8]	; (b4c34 <hal_usart_init_ex+0xc>)
   b4c2c:	681b      	ldr	r3, [r3, #0]
   b4c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4c30:	9301      	str	r3, [sp, #4]
   b4c32:	bd08      	pop	{r3, pc}
   b4c34:	0003023c 	.word	0x0003023c

000b4c38 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4c38:	b508      	push	{r3, lr}
   b4c3a:	4b02      	ldr	r3, [pc, #8]	; (b4c44 <HAL_USB_USART_Init+0xc>)
   b4c3c:	681b      	ldr	r3, [r3, #0]
   b4c3e:	681b      	ldr	r3, [r3, #0]
   b4c40:	9301      	str	r3, [sp, #4]
   b4c42:	bd08      	pop	{r3, pc}
   b4c44:	0003024c 	.word	0x0003024c

000b4c48 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4c48:	b508      	push	{r3, lr}
   b4c4a:	4b02      	ldr	r3, [pc, #8]	; (b4c54 <HAL_USB_USART_Begin+0xc>)
   b4c4c:	681b      	ldr	r3, [r3, #0]
   b4c4e:	685b      	ldr	r3, [r3, #4]
   b4c50:	9301      	str	r3, [sp, #4]
   b4c52:	bd08      	pop	{r3, pc}
   b4c54:	0003024c 	.word	0x0003024c

000b4c58 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4c58:	b508      	push	{r3, lr}
   b4c5a:	4b02      	ldr	r3, [pc, #8]	; (b4c64 <HAL_USB_USART_Available_Data+0xc>)
   b4c5c:	681b      	ldr	r3, [r3, #0]
   b4c5e:	691b      	ldr	r3, [r3, #16]
   b4c60:	9301      	str	r3, [sp, #4]
   b4c62:	bd08      	pop	{r3, pc}
   b4c64:	0003024c 	.word	0x0003024c

000b4c68 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4c68:	b508      	push	{r3, lr}
   b4c6a:	4b02      	ldr	r3, [pc, #8]	; (b4c74 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4c6c:	681b      	ldr	r3, [r3, #0]
   b4c6e:	695b      	ldr	r3, [r3, #20]
   b4c70:	9301      	str	r3, [sp, #4]
   b4c72:	bd08      	pop	{r3, pc}
   b4c74:	0003024c 	.word	0x0003024c

000b4c78 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4c78:	b508      	push	{r3, lr}
   b4c7a:	4b02      	ldr	r3, [pc, #8]	; (b4c84 <HAL_USB_USART_Receive_Data+0xc>)
   b4c7c:	681b      	ldr	r3, [r3, #0]
   b4c7e:	699b      	ldr	r3, [r3, #24]
   b4c80:	9301      	str	r3, [sp, #4]
   b4c82:	bd08      	pop	{r3, pc}
   b4c84:	0003024c 	.word	0x0003024c

000b4c88 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4c88:	b508      	push	{r3, lr}
   b4c8a:	4b02      	ldr	r3, [pc, #8]	; (b4c94 <HAL_USB_USART_Send_Data+0xc>)
   b4c8c:	681b      	ldr	r3, [r3, #0]
   b4c8e:	69db      	ldr	r3, [r3, #28]
   b4c90:	9301      	str	r3, [sp, #4]
   b4c92:	bd08      	pop	{r3, pc}
   b4c94:	0003024c 	.word	0x0003024c

000b4c98 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4c98:	b508      	push	{r3, lr}
   b4c9a:	4b02      	ldr	r3, [pc, #8]	; (b4ca4 <HAL_USB_USART_Flush_Data+0xc>)
   b4c9c:	681b      	ldr	r3, [r3, #0]
   b4c9e:	6a1b      	ldr	r3, [r3, #32]
   b4ca0:	9301      	str	r3, [sp, #4]
   b4ca2:	bd08      	pop	{r3, pc}
   b4ca4:	0003024c 	.word	0x0003024c

000b4ca8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4ca8:	b508      	push	{r3, lr}
   b4caa:	4b02      	ldr	r3, [pc, #8]	; (b4cb4 <set_system_mode+0xc>)
   b4cac:	681b      	ldr	r3, [r3, #0]
   b4cae:	685b      	ldr	r3, [r3, #4]
   b4cb0:	9301      	str	r3, [sp, #4]
   b4cb2:	bd08      	pop	{r3, pc}
   b4cb4:	00030220 	.word	0x00030220

000b4cb8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4cb8:	b508      	push	{r3, lr}
   b4cba:	4b02      	ldr	r3, [pc, #8]	; (b4cc4 <system_thread_set_state+0xc>)
   b4cbc:	681b      	ldr	r3, [r3, #0]
   b4cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4cc0:	9301      	str	r3, [sp, #4]
   b4cc2:	bd08      	pop	{r3, pc}
   b4cc4:	00030220 	.word	0x00030220

000b4cc8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4cc8:	b508      	push	{r3, lr}
   b4cca:	4b03      	ldr	r3, [pc, #12]	; (b4cd8 <system_ctrl_set_app_request_handler+0x10>)
   b4ccc:	681b      	ldr	r3, [r3, #0]
   b4cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4cd2:	9301      	str	r3, [sp, #4]
   b4cd4:	bd08      	pop	{r3, pc}
   b4cd6:	0000      	.short	0x0000
   b4cd8:	00030220 	.word	0x00030220

000b4cdc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4cdc:	b508      	push	{r3, lr}
   b4cde:	4b03      	ldr	r3, [pc, #12]	; (b4cec <system_ctrl_set_result+0x10>)
   b4ce0:	681b      	ldr	r3, [r3, #0]
   b4ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4ce6:	9301      	str	r3, [sp, #4]
   b4ce8:	bd08      	pop	{r3, pc}
   b4cea:	0000      	.short	0x0000
   b4cec:	00030220 	.word	0x00030220

000b4cf0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4cf0:	b508      	push	{r3, lr}
   b4cf2:	4b02      	ldr	r3, [pc, #8]	; (b4cfc <spark_set_random_seed_from_cloud_handler+0xc>)
   b4cf4:	681b      	ldr	r3, [r3, #0]
   b4cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4cf8:	9301      	str	r3, [sp, #4]
   b4cfa:	bd08      	pop	{r3, pc}
   b4cfc:	00030244 	.word	0x00030244

000b4d00 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4d00:	b508      	push	{r3, lr}
   b4d02:	4b02      	ldr	r3, [pc, #8]	; (b4d0c <network_connect+0xc>)
   b4d04:	681b      	ldr	r3, [r3, #0]
   b4d06:	685b      	ldr	r3, [r3, #4]
   b4d08:	9301      	str	r3, [sp, #4]
   b4d0a:	bd08      	pop	{r3, pc}
   b4d0c:	00030240 	.word	0x00030240

000b4d10 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4d10:	b508      	push	{r3, lr}
   b4d12:	4b02      	ldr	r3, [pc, #8]	; (b4d1c <network_connecting+0xc>)
   b4d14:	681b      	ldr	r3, [r3, #0]
   b4d16:	689b      	ldr	r3, [r3, #8]
   b4d18:	9301      	str	r3, [sp, #4]
   b4d1a:	bd08      	pop	{r3, pc}
   b4d1c:	00030240 	.word	0x00030240

000b4d20 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4d20:	b508      	push	{r3, lr}
   b4d22:	4b02      	ldr	r3, [pc, #8]	; (b4d2c <network_disconnect+0xc>)
   b4d24:	681b      	ldr	r3, [r3, #0]
   b4d26:	68db      	ldr	r3, [r3, #12]
   b4d28:	9301      	str	r3, [sp, #4]
   b4d2a:	bd08      	pop	{r3, pc}
   b4d2c:	00030240 	.word	0x00030240

000b4d30 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4d30:	b508      	push	{r3, lr}
   b4d32:	4b02      	ldr	r3, [pc, #8]	; (b4d3c <network_ready+0xc>)
   b4d34:	681b      	ldr	r3, [r3, #0]
   b4d36:	691b      	ldr	r3, [r3, #16]
   b4d38:	9301      	str	r3, [sp, #4]
   b4d3a:	bd08      	pop	{r3, pc}
   b4d3c:	00030240 	.word	0x00030240

000b4d40 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4d40:	b508      	push	{r3, lr}
   b4d42:	4b02      	ldr	r3, [pc, #8]	; (b4d4c <network_on+0xc>)
   b4d44:	681b      	ldr	r3, [r3, #0]
   b4d46:	695b      	ldr	r3, [r3, #20]
   b4d48:	9301      	str	r3, [sp, #4]
   b4d4a:	bd08      	pop	{r3, pc}
   b4d4c:	00030240 	.word	0x00030240

000b4d50 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4d50:	b508      	push	{r3, lr}
   b4d52:	4b02      	ldr	r3, [pc, #8]	; (b4d5c <network_off+0xc>)
   b4d54:	681b      	ldr	r3, [r3, #0]
   b4d56:	699b      	ldr	r3, [r3, #24]
   b4d58:	9301      	str	r3, [sp, #4]
   b4d5a:	bd08      	pop	{r3, pc}
   b4d5c:	00030240 	.word	0x00030240

000b4d60 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4d60:	b508      	push	{r3, lr}
   b4d62:	4b02      	ldr	r3, [pc, #8]	; (b4d6c <network_listen+0xc>)
   b4d64:	681b      	ldr	r3, [r3, #0]
   b4d66:	69db      	ldr	r3, [r3, #28]
   b4d68:	9301      	str	r3, [sp, #4]
   b4d6a:	bd08      	pop	{r3, pc}
   b4d6c:	00030240 	.word	0x00030240

000b4d70 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4d70:	b508      	push	{r3, lr}
   b4d72:	4b02      	ldr	r3, [pc, #8]	; (b4d7c <network_listening+0xc>)
   b4d74:	681b      	ldr	r3, [r3, #0]
   b4d76:	6a1b      	ldr	r3, [r3, #32]
   b4d78:	9301      	str	r3, [sp, #4]
   b4d7a:	bd08      	pop	{r3, pc}
   b4d7c:	00030240 	.word	0x00030240

000b4d80 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4d80:	b508      	push	{r3, lr}
   b4d82:	4b02      	ldr	r3, [pc, #8]	; (b4d8c <network_set_listen_timeout+0xc>)
   b4d84:	681b      	ldr	r3, [r3, #0]
   b4d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4d88:	9301      	str	r3, [sp, #4]
   b4d8a:	bd08      	pop	{r3, pc}
   b4d8c:	00030240 	.word	0x00030240

000b4d90 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4d90:	b508      	push	{r3, lr}
   b4d92:	4b02      	ldr	r3, [pc, #8]	; (b4d9c <network_get_listen_timeout+0xc>)
   b4d94:	681b      	ldr	r3, [r3, #0]
   b4d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4d98:	9301      	str	r3, [sp, #4]
   b4d9a:	bd08      	pop	{r3, pc}
   b4d9c:	00030240 	.word	0x00030240

000b4da0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4da0:	b508      	push	{r3, lr}
   b4da2:	4b02      	ldr	r3, [pc, #8]	; (b4dac <network_is_on+0xc>)
   b4da4:	681b      	ldr	r3, [r3, #0]
   b4da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4da8:	9301      	str	r3, [sp, #4]
   b4daa:	bd08      	pop	{r3, pc}
   b4dac:	00030240 	.word	0x00030240

000b4db0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4db0:	b508      	push	{r3, lr}
   b4db2:	4b02      	ldr	r3, [pc, #8]	; (b4dbc <network_is_off+0xc>)
   b4db4:	681b      	ldr	r3, [r3, #0]
   b4db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4db8:	9301      	str	r3, [sp, #4]
   b4dba:	bd08      	pop	{r3, pc}
   b4dbc:	00030240 	.word	0x00030240

000b4dc0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4dc0:	b508      	push	{r3, lr}
   b4dc2:	4b02      	ldr	r3, [pc, #8]	; (b4dcc <malloc+0xc>)
   b4dc4:	681b      	ldr	r3, [r3, #0]
   b4dc6:	681b      	ldr	r3, [r3, #0]
   b4dc8:	9301      	str	r3, [sp, #4]
   b4dca:	bd08      	pop	{r3, pc}
   b4dcc:	0003021c 	.word	0x0003021c

000b4dd0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4dd0:	b508      	push	{r3, lr}
   b4dd2:	4b02      	ldr	r3, [pc, #8]	; (b4ddc <free+0xc>)
   b4dd4:	681b      	ldr	r3, [r3, #0]
   b4dd6:	685b      	ldr	r3, [r3, #4]
   b4dd8:	9301      	str	r3, [sp, #4]
   b4dda:	bd08      	pop	{r3, pc}
   b4ddc:	0003021c 	.word	0x0003021c

000b4de0 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4de0:	b508      	push	{r3, lr}
   b4de2:	4b02      	ldr	r3, [pc, #8]	; (b4dec <__assert_func+0xc>)
   b4de4:	681b      	ldr	r3, [r3, #0]
   b4de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4de8:	9301      	str	r3, [sp, #4]
   b4dea:	bd08      	pop	{r3, pc}
   b4dec:	0003021c 	.word	0x0003021c

000b4df0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4df0:	b508      	push	{r3, lr}
   b4df2:	4b02      	ldr	r3, [pc, #8]	; (b4dfc <newlib_impure_ptr_callback+0xc>)
   b4df4:	681b      	ldr	r3, [r3, #0]
   b4df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4df8:	9301      	str	r3, [sp, #4]
   b4dfa:	bd08      	pop	{r3, pc}
   b4dfc:	0003021c 	.word	0x0003021c

000b4e00 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4e00:	4802      	ldr	r0, [pc, #8]	; (b4e0c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4e02:	2300      	movs	r3, #0
   b4e04:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4e06:	f7ff be47 	b.w	b4a98 <os_mutex_recursive_create>
   b4e0a:	bf00      	nop
   b4e0c:	2003e6b8 	.word	0x2003e6b8

000b4e10 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4e10:	2200      	movs	r2, #0
   b4e12:	6840      	ldr	r0, [r0, #4]
   b4e14:	4611      	mov	r1, r2
   b4e16:	f7ff bfab 	b.w	b4d70 <network_listening>

000b4e1a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4e1a:	2200      	movs	r2, #0
   b4e1c:	6840      	ldr	r0, [r0, #4]
   b4e1e:	4611      	mov	r1, r2
   b4e20:	f7ff bfb6 	b.w	b4d90 <network_get_listen_timeout>

000b4e24 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4e24:	6840      	ldr	r0, [r0, #4]
   b4e26:	2200      	movs	r2, #0
   b4e28:	f7ff bfaa 	b.w	b4d80 <network_set_listen_timeout>

000b4e2c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4e2c:	6840      	ldr	r0, [r0, #4]
   b4e2e:	2200      	movs	r2, #0
   b4e30:	f081 0101 	eor.w	r1, r1, #1
   b4e34:	f7ff bf94 	b.w	b4d60 <network_listen>

000b4e38 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4e38:	2300      	movs	r3, #0
   b4e3a:	6840      	ldr	r0, [r0, #4]
   b4e3c:	461a      	mov	r2, r3
   b4e3e:	4619      	mov	r1, r3
   b4e40:	f7ff bf86 	b.w	b4d50 <network_off>

000b4e44 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4e44:	2300      	movs	r3, #0
   b4e46:	6840      	ldr	r0, [r0, #4]
   b4e48:	461a      	mov	r2, r3
   b4e4a:	4619      	mov	r1, r3
   b4e4c:	f7ff bf78 	b.w	b4d40 <network_on>

000b4e50 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4e50:	2200      	movs	r2, #0
   b4e52:	6840      	ldr	r0, [r0, #4]
   b4e54:	4611      	mov	r1, r2
   b4e56:	f7ff bf6b 	b.w	b4d30 <network_ready>

000b4e5a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4e5a:	2200      	movs	r2, #0
   b4e5c:	6840      	ldr	r0, [r0, #4]
   b4e5e:	4611      	mov	r1, r2
   b4e60:	f7ff bf56 	b.w	b4d10 <network_connecting>

000b4e64 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4e64:	6840      	ldr	r0, [r0, #4]
   b4e66:	2200      	movs	r2, #0
   b4e68:	2102      	movs	r1, #2
   b4e6a:	f7ff bf59 	b.w	b4d20 <network_disconnect>

000b4e6e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4e6e:	2300      	movs	r3, #0
   b4e70:	6840      	ldr	r0, [r0, #4]
   b4e72:	461a      	mov	r2, r3
   b4e74:	f7ff bf44 	b.w	b4d00 <network_connect>

000b4e78 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4e78:	4b02      	ldr	r3, [pc, #8]	; (b4e84 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4e7a:	2203      	movs	r2, #3
   b4e7c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4e7e:	4a02      	ldr	r2, [pc, #8]	; (b4e88 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4e80:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4e82:	4770      	bx	lr
   b4e84:	2003e6bc 	.word	0x2003e6bc
   b4e88:	000b5af8 	.word	0x000b5af8

000b4e8c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4e8c:	4770      	bx	lr

000b4e8e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4e8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4e90:	4606      	mov	r6, r0
   b4e92:	4615      	mov	r5, r2
   b4e94:	460c      	mov	r4, r1
   b4e96:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4e98:	42bc      	cmp	r4, r7
   b4e9a:	d006      	beq.n	b4eaa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4e9c:	6833      	ldr	r3, [r6, #0]
   b4e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4ea2:	689b      	ldr	r3, [r3, #8]
   b4ea4:	4630      	mov	r0, r6
   b4ea6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4ea8:	e7f6      	b.n	b4e98 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4eaa:	4628      	mov	r0, r5
   b4eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4eae <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4eae:	7c00      	ldrb	r0, [r0, #16]
   b4eb0:	2200      	movs	r2, #0
   b4eb2:	f7ff be21 	b.w	b4af8 <hal_i2c_write>

000b4eb6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4eb6:	7c00      	ldrb	r0, [r0, #16]
   b4eb8:	2100      	movs	r1, #0
   b4eba:	f7ff be25 	b.w	b4b08 <hal_i2c_available>

000b4ebe <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4ebe:	7c00      	ldrb	r0, [r0, #16]
   b4ec0:	2100      	movs	r1, #0
   b4ec2:	f7ff be29 	b.w	b4b18 <hal_i2c_read>

000b4ec6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4ec6:	7c00      	ldrb	r0, [r0, #16]
   b4ec8:	2100      	movs	r1, #0
   b4eca:	f7ff be2d 	b.w	b4b28 <hal_i2c_peek>

000b4ece <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4ece:	7c00      	ldrb	r0, [r0, #16]
   b4ed0:	2100      	movs	r1, #0
   b4ed2:	f7ff be31 	b.w	b4b38 <hal_i2c_flush>

000b4ed6 <_ZN7TwoWireD0Ev>:
   b4ed6:	b510      	push	{r4, lr}
   b4ed8:	2114      	movs	r1, #20
   b4eda:	4604      	mov	r4, r0
   b4edc:	f7ff fd97 	bl	b4a0e <_ZdlPvj>
   b4ee0:	4620      	mov	r0, r4
   b4ee2:	bd10      	pop	{r4, pc}

000b4ee4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4ee4:	b538      	push	{r3, r4, r5, lr}
   b4ee6:	4604      	mov	r4, r0
   b4ee8:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4eee:	2200      	movs	r2, #0
   b4ef0:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4ef4:	4b09      	ldr	r3, [pc, #36]	; (b4f1c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b4ef6:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4ef8:	4608      	mov	r0, r1
   b4efa:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b4efc:	4629      	mov	r1, r5
   b4efe:	f7ff fe2b 	bl	b4b58 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4f02:	30bf      	adds	r0, #191	; 0xbf
   b4f04:	d108      	bne.n	b4f18 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b4f06:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4f08:	07db      	lsls	r3, r3, #31
   b4f0a:	d505      	bpl.n	b4f18 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b4f0c:	6868      	ldr	r0, [r5, #4]
   b4f0e:	f7ff ff5f 	bl	b4dd0 <free>
    free(conf.tx_buffer);
   b4f12:	68e8      	ldr	r0, [r5, #12]
   b4f14:	f7ff ff5c 	bl	b4dd0 <free>
}
   b4f18:	4620      	mov	r0, r4
   b4f1a:	bd38      	pop	{r3, r4, r5, pc}
   b4f1c:	000b5b34 	.word	0x000b5b34

000b4f20 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4f20:	4770      	bx	lr

000b4f22 <_ZN9IPAddressD0Ev>:
   b4f22:	b510      	push	{r4, lr}
   b4f24:	2118      	movs	r1, #24
   b4f26:	4604      	mov	r4, r0
   b4f28:	f7ff fd71 	bl	b4a0e <_ZdlPvj>
   b4f2c:	4620      	mov	r0, r4
   b4f2e:	bd10      	pop	{r4, pc}

000b4f30 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4f30:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4f32:	7d03      	ldrb	r3, [r0, #20]
   b4f34:	2b06      	cmp	r3, #6
{
   b4f36:	b08d      	sub	sp, #52	; 0x34
   b4f38:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4f3a:	f100 0704 	add.w	r7, r0, #4
   b4f3e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4f42:	d012      	beq.n	b4f6a <_ZNK9IPAddress7printToER5Print+0x3a>
   b4f44:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4f48:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4f4c:	220a      	movs	r2, #10
   b4f4e:	4630      	mov	r0, r6
   b4f50:	f000 f94f 	bl	b51f2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4f54:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4f56:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4f58:	d019      	beq.n	b4f8e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4f5a:	2c00      	cmp	r4, #0
   b4f5c:	d0f4      	beq.n	b4f48 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4f5e:	212e      	movs	r1, #46	; 0x2e
   b4f60:	4630      	mov	r0, r6
   b4f62:	f000 f937 	bl	b51d4 <_ZN5Print5printEc>
   b4f66:	4404      	add	r4, r0
   b4f68:	e7ee      	b.n	b4f48 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4f6a:	232f      	movs	r3, #47	; 0x2f
   b4f6c:	466a      	mov	r2, sp
   b4f6e:	4639      	mov	r1, r7
   b4f70:	200a      	movs	r0, #10
		buf[0] = 0;
   b4f72:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4f76:	f7ff fdf7 	bl	b4b68 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4f7a:	4668      	mov	r0, sp
   b4f7c:	f7ff fd02 	bl	b4984 <strlen>
   b4f80:	6833      	ldr	r3, [r6, #0]
   b4f82:	4602      	mov	r2, r0
   b4f84:	68db      	ldr	r3, [r3, #12]
   b4f86:	4669      	mov	r1, sp
   b4f88:	4630      	mov	r0, r6
   b4f8a:	4798      	blx	r3
   b4f8c:	4604      	mov	r4, r0
    }
    return n;
}
   b4f8e:	4620      	mov	r0, r4
   b4f90:	b00d      	add	sp, #52	; 0x34
   b4f92:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4f94 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4f94:	b510      	push	{r4, lr}
   b4f96:	4b05      	ldr	r3, [pc, #20]	; (b4fac <_ZN9IPAddressC1Ev+0x18>)
   b4f98:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4f9a:	2211      	movs	r2, #17
   b4f9c:	f840 3b04 	str.w	r3, [r0], #4
   b4fa0:	2100      	movs	r1, #0
   b4fa2:	f000 fcff 	bl	b59a4 <memset>
}
   b4fa6:	4620      	mov	r0, r4
   b4fa8:	bd10      	pop	{r4, pc}
   b4faa:	bf00      	nop
   b4fac:	000b5b5c 	.word	0x000b5b5c

000b4fb0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4fb0:	4603      	mov	r3, r0
   b4fb2:	4a07      	ldr	r2, [pc, #28]	; (b4fd0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4fb4:	b510      	push	{r4, lr}
   b4fb6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4fba:	f101 0210 	add.w	r2, r1, #16
   b4fbe:	f851 4b04 	ldr.w	r4, [r1], #4
   b4fc2:	f843 4b04 	str.w	r4, [r3], #4
   b4fc6:	4291      	cmp	r1, r2
   b4fc8:	d1f9      	bne.n	b4fbe <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4fca:	780a      	ldrb	r2, [r1, #0]
   b4fcc:	701a      	strb	r2, [r3, #0]
}
   b4fce:	bd10      	pop	{r4, pc}
   b4fd0:	000b5b5c 	.word	0x000b5b5c

000b4fd4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4fd4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4fd6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4fda:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4fde:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4fe2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4fe6:	2304      	movs	r3, #4
   b4fe8:	6041      	str	r1, [r0, #4]
   b4fea:	7503      	strb	r3, [r0, #20]
}
   b4fec:	bd10      	pop	{r4, pc}
	...

000b4ff0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4ff0:	b507      	push	{r0, r1, r2, lr}
   b4ff2:	4b06      	ldr	r3, [pc, #24]	; (b500c <_ZN9IPAddressC1EPKh+0x1c>)
   b4ff4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4ff6:	78cb      	ldrb	r3, [r1, #3]
   b4ff8:	9300      	str	r3, [sp, #0]
   b4ffa:	788b      	ldrb	r3, [r1, #2]
   b4ffc:	784a      	ldrb	r2, [r1, #1]
   b4ffe:	7809      	ldrb	r1, [r1, #0]
   b5000:	f7ff ffe8 	bl	b4fd4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5004:	b003      	add	sp, #12
   b5006:	f85d fb04 	ldr.w	pc, [sp], #4
   b500a:	bf00      	nop
   b500c:	000b5b5c 	.word	0x000b5b5c

000b5010 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5010:	4b01      	ldr	r3, [pc, #4]	; (b5018 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5012:	4a02      	ldr	r2, [pc, #8]	; (b501c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5014:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5016:	4770      	bx	lr
   b5018:	2003e6c4 	.word	0x2003e6c4
   b501c:	000b5b68 	.word	0x000b5b68

000b5020 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5020:	2300      	movs	r3, #0
   b5022:	6840      	ldr	r0, [r0, #4]
   b5024:	461a      	mov	r2, r3
   b5026:	f7ff be6b 	b.w	b4d00 <network_connect>

000b502a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b502a:	6840      	ldr	r0, [r0, #4]
   b502c:	2200      	movs	r2, #0
   b502e:	2102      	movs	r1, #2
   b5030:	f7ff be76 	b.w	b4d20 <network_disconnect>

000b5034 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5034:	2200      	movs	r2, #0
   b5036:	6840      	ldr	r0, [r0, #4]
   b5038:	4611      	mov	r1, r2
   b503a:	f7ff be69 	b.w	b4d10 <network_connecting>

000b503e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b503e:	2200      	movs	r2, #0
   b5040:	6840      	ldr	r0, [r0, #4]
   b5042:	4611      	mov	r1, r2
   b5044:	f7ff be74 	b.w	b4d30 <network_ready>

000b5048 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5048:	2300      	movs	r3, #0
   b504a:	6840      	ldr	r0, [r0, #4]
   b504c:	461a      	mov	r2, r3
   b504e:	4619      	mov	r1, r3
   b5050:	f7ff be76 	b.w	b4d40 <network_on>

000b5054 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5054:	2300      	movs	r3, #0
   b5056:	6840      	ldr	r0, [r0, #4]
   b5058:	461a      	mov	r2, r3
   b505a:	4619      	mov	r1, r3
   b505c:	f7ff be78 	b.w	b4d50 <network_off>

000b5060 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5060:	6840      	ldr	r0, [r0, #4]
   b5062:	2100      	movs	r1, #0
   b5064:	f7ff be9c 	b.w	b4da0 <network_is_on>

000b5068 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5068:	6840      	ldr	r0, [r0, #4]
   b506a:	2100      	movs	r1, #0
   b506c:	f7ff bea0 	b.w	b4db0 <network_is_off>

000b5070 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5070:	6840      	ldr	r0, [r0, #4]
   b5072:	2200      	movs	r2, #0
   b5074:	f081 0101 	eor.w	r1, r1, #1
   b5078:	f7ff be72 	b.w	b4d60 <network_listen>

000b507c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b507c:	6840      	ldr	r0, [r0, #4]
   b507e:	2200      	movs	r2, #0
   b5080:	f7ff be7e 	b.w	b4d80 <network_set_listen_timeout>

000b5084 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5084:	2200      	movs	r2, #0
   b5086:	6840      	ldr	r0, [r0, #4]
   b5088:	4611      	mov	r1, r2
   b508a:	f7ff be81 	b.w	b4d90 <network_get_listen_timeout>

000b508e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b508e:	2200      	movs	r2, #0
   b5090:	6840      	ldr	r0, [r0, #4]
   b5092:	4611      	mov	r1, r2
   b5094:	f7ff be6c 	b.w	b4d70 <network_listening>

000b5098 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b509c:	b095      	sub	sp, #84	; 0x54
   b509e:	4614      	mov	r4, r2
   b50a0:	460d      	mov	r5, r1
   b50a2:	4607      	mov	r7, r0
    IPAddress addr;
   b50a4:	f7ff ff76 	bl	b4f94 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b50a8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b50aa:	221c      	movs	r2, #28
   b50ac:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b50ae:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b50b0:	f000 fc78 	bl	b59a4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b50b4:	2340      	movs	r3, #64	; 0x40
   b50b6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b50b8:	4620      	mov	r0, r4
   b50ba:	466b      	mov	r3, sp
   b50bc:	aa0c      	add	r2, sp, #48	; 0x30
   b50be:	2100      	movs	r1, #0
   b50c0:	f7ff fd62 	bl	b4b88 <netdb_getaddrinfo>
    if (!r) {
   b50c4:	4604      	mov	r4, r0
   b50c6:	2800      	cmp	r0, #0
   b50c8:	d14b      	bne.n	b5162 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b50ca:	4602      	mov	r2, r0
   b50cc:	2101      	movs	r1, #1
   b50ce:	6868      	ldr	r0, [r5, #4]
   b50d0:	f7ff fe2e 	bl	b4d30 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b50d4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b50d6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b50d8:	4622      	mov	r2, r4
   b50da:	6868      	ldr	r0, [r5, #4]
   b50dc:	f7ff fe28 	bl	b4d30 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b50e0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b50e2:	4681      	mov	r9, r0
        bool ok = false;
   b50e4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b50e6:	2e00      	cmp	r6, #0
   b50e8:	d03b      	beq.n	b5162 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b50ea:	2900      	cmp	r1, #0
   b50ec:	d139      	bne.n	b5162 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b50ee:	6873      	ldr	r3, [r6, #4]
   b50f0:	2b02      	cmp	r3, #2
   b50f2:	d003      	beq.n	b50fc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b50f4:	2b0a      	cmp	r3, #10
   b50f6:	d011      	beq.n	b511c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b50f8:	69f6      	ldr	r6, [r6, #28]
   b50fa:	e7f4      	b.n	b50e6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b50fc:	f1b8 0f00 	cmp.w	r8, #0
   b5100:	d0fa      	beq.n	b50f8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5102:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5104:	a806      	add	r0, sp, #24
   b5106:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5108:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b510a:	f7ff ff71 	bl	b4ff0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b510e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5110:	1d3c      	adds	r4, r7, #4
   b5112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5114:	682b      	ldr	r3, [r5, #0]
   b5116:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5118:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b511a:	e7ed      	b.n	b50f8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b511c:	f1b9 0f00 	cmp.w	r9, #0
   b5120:	d0ea      	beq.n	b50f8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5122:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5124:	2210      	movs	r2, #16
   b5126:	a801      	add	r0, sp, #4
   b5128:	f000 fc3c 	bl	b59a4 <memset>
                    a.v = 6;
   b512c:	2306      	movs	r3, #6
   b512e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5132:	ad01      	add	r5, sp, #4
   b5134:	f104 0308 	add.w	r3, r4, #8
   b5138:	3418      	adds	r4, #24
   b513a:	6818      	ldr	r0, [r3, #0]
   b513c:	6859      	ldr	r1, [r3, #4]
   b513e:	462a      	mov	r2, r5
   b5140:	c203      	stmia	r2!, {r0, r1}
   b5142:	3308      	adds	r3, #8
   b5144:	42a3      	cmp	r3, r4
   b5146:	4615      	mov	r5, r2
   b5148:	d1f7      	bne.n	b513a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b514a:	a901      	add	r1, sp, #4
   b514c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b514e:	ad07      	add	r5, sp, #28
   b5150:	f7ff ff2e 	bl	b4fb0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5156:	1d3c      	adds	r4, r7, #4
   b5158:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b515a:	682b      	ldr	r3, [r5, #0]
   b515c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b515e:	4649      	mov	r1, r9
   b5160:	e7ca      	b.n	b50f8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5162:	9800      	ldr	r0, [sp, #0]
   b5164:	f7ff fd08 	bl	b4b78 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5168:	4638      	mov	r0, r7
   b516a:	b015      	add	sp, #84	; 0x54
   b516c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5170 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5170:	4b02      	ldr	r3, [pc, #8]	; (b517c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5172:	4a03      	ldr	r2, [pc, #12]	; (b5180 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5174:	601a      	str	r2, [r3, #0]
   b5176:	2200      	movs	r2, #0
   b5178:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b517a:	4770      	bx	lr
   b517c:	2003e6c8 	.word	0x2003e6c8
   b5180:	000b5b74 	.word	0x000b5b74

000b5184 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5186:	4606      	mov	r6, r0
   b5188:	460d      	mov	r5, r1
  size_t n = 0;
   b518a:	188f      	adds	r7, r1, r2
   b518c:	2400      	movs	r4, #0
  while (size--) {
   b518e:	42bd      	cmp	r5, r7
   b5190:	d00c      	beq.n	b51ac <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5192:	6833      	ldr	r3, [r6, #0]
   b5194:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5198:	689b      	ldr	r3, [r3, #8]
   b519a:	4630      	mov	r0, r6
   b519c:	4798      	blx	r3
     if (chunk>=0)
   b519e:	1e03      	subs	r3, r0, #0
   b51a0:	db01      	blt.n	b51a6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b51a2:	441c      	add	r4, r3
  while (size--) {
   b51a4:	e7f3      	b.n	b518e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b51a6:	2c00      	cmp	r4, #0
   b51a8:	bf08      	it	eq
   b51aa:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b51ac:	4620      	mov	r0, r4
   b51ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b51b0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b51b0:	b513      	push	{r0, r1, r4, lr}
   b51b2:	4604      	mov	r4, r0
    }
   b51b4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b51b6:	b159      	cbz	r1, b51d0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b51b8:	9101      	str	r1, [sp, #4]
   b51ba:	f7ff fbe3 	bl	b4984 <strlen>
   b51be:	6823      	ldr	r3, [r4, #0]
   b51c0:	9901      	ldr	r1, [sp, #4]
   b51c2:	68db      	ldr	r3, [r3, #12]
   b51c4:	4602      	mov	r2, r0
   b51c6:	4620      	mov	r0, r4
    }
   b51c8:	b002      	add	sp, #8
   b51ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b51ce:	4718      	bx	r3
    }
   b51d0:	b002      	add	sp, #8
   b51d2:	bd10      	pop	{r4, pc}

000b51d4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b51d4:	6803      	ldr	r3, [r0, #0]
   b51d6:	689b      	ldr	r3, [r3, #8]
   b51d8:	4718      	bx	r3

000b51da <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b51da:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b51dc:	210d      	movs	r1, #13
{
   b51de:	4605      	mov	r5, r0
  size_t n = print('\r');
   b51e0:	f7ff fff8 	bl	b51d4 <_ZN5Print5printEc>
  n += print('\n');
   b51e4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b51e6:	4604      	mov	r4, r0
  n += print('\n');
   b51e8:	4628      	mov	r0, r5
   b51ea:	f7ff fff3 	bl	b51d4 <_ZN5Print5printEc>
  return n;
}
   b51ee:	4420      	add	r0, r4
   b51f0:	bd38      	pop	{r3, r4, r5, pc}

000b51f2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b51f2:	b530      	push	{r4, r5, lr}
   b51f4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b51f6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b51f8:	2a01      	cmp	r2, #1
  *str = '\0';
   b51fa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b51fe:	bf98      	it	ls
   b5200:	220a      	movls	r2, #10
   b5202:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5204:	460d      	mov	r5, r1
   b5206:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b520a:	fb01 5312 	mls	r3, r1, r2, r5
   b520e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5212:	2b09      	cmp	r3, #9
   b5214:	bf94      	ite	ls
   b5216:	3330      	addls	r3, #48	; 0x30
   b5218:	3337      	addhi	r3, #55	; 0x37
   b521a:	b2db      	uxtb	r3, r3
  } while(n);
   b521c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b521e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5222:	d9ef      	bls.n	b5204 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5224:	4621      	mov	r1, r4
   b5226:	f7ff ffc3 	bl	b51b0 <_ZN5Print5writeEPKc>
}
   b522a:	b00b      	add	sp, #44	; 0x2c
   b522c:	bd30      	pop	{r4, r5, pc}
	...

000b5230 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b5230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5234:	ec55 4b10 	vmov	r4, r5, d0
   b5238:	4606      	mov	r6, r0
   b523a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b523c:	ee10 2a10 	vmov	r2, s0
   b5240:	ee10 0a10 	vmov	r0, s0
   b5244:	462b      	mov	r3, r5
   b5246:	4629      	mov	r1, r5
   b5248:	f7ff fb3e 	bl	b48c8 <__aeabi_dcmpun>
   b524c:	b140      	cbz	r0, b5260 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b524e:	4953      	ldr	r1, [pc, #332]	; (b539c <_ZN5Print10printFloatEdh+0x16c>)
   b5250:	4630      	mov	r0, r6
   b5252:	f7ff ffad 	bl	b51b0 <_ZN5Print5writeEPKc>
   b5256:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b5258:	4650      	mov	r0, sl
   b525a:	b003      	add	sp, #12
   b525c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b5260:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b5264:	4b4e      	ldr	r3, [pc, #312]	; (b53a0 <_ZN5Print10printFloatEdh+0x170>)
   b5266:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b526a:	4620      	mov	r0, r4
   b526c:	4649      	mov	r1, r9
   b526e:	f7ff fb2b 	bl	b48c8 <__aeabi_dcmpun>
   b5272:	b948      	cbnz	r0, b5288 <_ZN5Print10printFloatEdh+0x58>
   b5274:	4b4a      	ldr	r3, [pc, #296]	; (b53a0 <_ZN5Print10printFloatEdh+0x170>)
   b5276:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b527a:	4620      	mov	r0, r4
   b527c:	4649      	mov	r1, r9
   b527e:	f7ff fb05 	bl	b488c <__aeabi_dcmple>
   b5282:	b908      	cbnz	r0, b5288 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b5284:	4947      	ldr	r1, [pc, #284]	; (b53a4 <_ZN5Print10printFloatEdh+0x174>)
   b5286:	e7e3      	b.n	b5250 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b5288:	4b47      	ldr	r3, [pc, #284]	; (b53a8 <_ZN5Print10printFloatEdh+0x178>)
   b528a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b528e:	4620      	mov	r0, r4
   b5290:	4629      	mov	r1, r5
   b5292:	f7ff fb0f 	bl	b48b4 <__aeabi_dcmpgt>
   b5296:	b108      	cbz	r0, b529c <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b5298:	4944      	ldr	r1, [pc, #272]	; (b53ac <_ZN5Print10printFloatEdh+0x17c>)
   b529a:	e7d9      	b.n	b5250 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b529c:	4b44      	ldr	r3, [pc, #272]	; (b53b0 <_ZN5Print10printFloatEdh+0x180>)
   b529e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b52a2:	4620      	mov	r0, r4
   b52a4:	4629      	mov	r1, r5
   b52a6:	f7ff fae7 	bl	b4878 <__aeabi_dcmplt>
   b52aa:	2800      	cmp	r0, #0
   b52ac:	d1f4      	bne.n	b5298 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b52ae:	2200      	movs	r2, #0
   b52b0:	2300      	movs	r3, #0
   b52b2:	4620      	mov	r0, r4
   b52b4:	4629      	mov	r1, r5
   b52b6:	f7ff fadf 	bl	b4878 <__aeabi_dcmplt>
   b52ba:	b1d0      	cbz	r0, b52f2 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b52bc:	212d      	movs	r1, #45	; 0x2d
   b52be:	4630      	mov	r0, r6
   b52c0:	f7ff ff88 	bl	b51d4 <_ZN5Print5printEc>
     number = -number;
   b52c4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b52c8:	4682      	mov	sl, r0
     number = -number;
   b52ca:	461d      	mov	r5, r3
  double rounding = 0.5;
   b52cc:	4939      	ldr	r1, [pc, #228]	; (b53b4 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b52ce:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b53bc <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b52d2:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b52d6:	2000      	movs	r0, #0
    rounding /= 10.0;
   b52d8:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b52dc:	fa5f f38b 	uxtb.w	r3, fp
   b52e0:	429f      	cmp	r7, r3
   b52e2:	d908      	bls.n	b52f6 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b52e4:	4642      	mov	r2, r8
   b52e6:	464b      	mov	r3, r9
   b52e8:	f7ff f97e 	bl	b45e8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b52ec:	f10b 0b01 	add.w	fp, fp, #1
   b52f0:	e7f4      	b.n	b52dc <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b52f2:	4682      	mov	sl, r0
   b52f4:	e7ea      	b.n	b52cc <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b52f6:	4622      	mov	r2, r4
   b52f8:	462b      	mov	r3, r5
   b52fa:	f7fe fe95 	bl	b4028 <__adddf3>
   b52fe:	460d      	mov	r5, r1
   b5300:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b5302:	f7ff fb1f 	bl	b4944 <__aeabi_d2uiz>
   b5306:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b5308:	f7fe ffca 	bl	b42a0 <__aeabi_ui2d>
   b530c:	4602      	mov	r2, r0
   b530e:	460b      	mov	r3, r1
   b5310:	4620      	mov	r0, r4
   b5312:	4629      	mov	r1, r5
   b5314:	f7fe fe86 	bl	b4024 <__aeabi_dsub>
        return printNumber(val, base) + t;
   b5318:	220a      	movs	r2, #10
   b531a:	4604      	mov	r4, r0
   b531c:	460d      	mov	r5, r1
   b531e:	4630      	mov	r0, r6
   b5320:	4641      	mov	r1, r8
   b5322:	f7ff ff66 	bl	b51f2 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b5326:	4482      	add	sl, r0
  if (digits > 0) {
   b5328:	2f00      	cmp	r7, #0
   b532a:	d095      	beq.n	b5258 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b532c:	4922      	ldr	r1, [pc, #136]	; (b53b8 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b532e:	f8df 908c 	ldr.w	r9, [pc, #140]	; b53bc <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b5332:	4630      	mov	r0, r6
   b5334:	f7ff ff3c 	bl	b51b0 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b5338:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b533c:	4482      	add	sl, r0
  while (digits-- > 0)
   b533e:	2f00      	cmp	r7, #0
   b5340:	d08a      	beq.n	b5258 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b5342:	4642      	mov	r2, r8
   b5344:	464b      	mov	r3, r9
   b5346:	4620      	mov	r0, r4
   b5348:	4629      	mov	r1, r5
   b534a:	f7ff f823 	bl	b4394 <__aeabi_dmul>
   b534e:	4604      	mov	r4, r0
   b5350:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b5352:	f7ff facf 	bl	b48f4 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b5356:	f1b0 0b00 	subs.w	fp, r0, #0
   b535a:	da1c      	bge.n	b5396 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b535c:	212d      	movs	r1, #45	; 0x2d
   b535e:	4630      	mov	r0, r6
   b5360:	f7ff ff38 	bl	b51d4 <_ZN5Print5printEc>
            val = -n;
   b5364:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b5368:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b536a:	220a      	movs	r2, #10
   b536c:	4630      	mov	r0, r6
   b536e:	9301      	str	r3, [sp, #4]
   b5370:	f7ff ff3f 	bl	b51f2 <_ZN5Print11printNumberEmh>
   b5374:	9b01      	ldr	r3, [sp, #4]
   b5376:	4418      	add	r0, r3
    n += print(toPrint);
   b5378:	4482      	add	sl, r0
    remainder -= toPrint;
   b537a:	4658      	mov	r0, fp
   b537c:	f7fe ffa0 	bl	b42c0 <__aeabi_i2d>
   b5380:	4602      	mov	r2, r0
   b5382:	460b      	mov	r3, r1
   b5384:	4620      	mov	r0, r4
   b5386:	4629      	mov	r1, r5
   b5388:	f7fe fe4c 	bl	b4024 <__aeabi_dsub>
   b538c:	3f01      	subs	r7, #1
   b538e:	4604      	mov	r4, r0
   b5390:	460d      	mov	r5, r1
   b5392:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b5394:	e7d3      	b.n	b533e <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b5396:	4659      	mov	r1, fp
        size_t t = 0;
   b5398:	2300      	movs	r3, #0
   b539a:	e7e6      	b.n	b536a <_ZN5Print10printFloatEdh+0x13a>
   b539c:	000b5ba8 	.word	0x000b5ba8
   b53a0:	7fefffff 	.word	0x7fefffff
   b53a4:	000b5bac 	.word	0x000b5bac
   b53a8:	41efffff 	.word	0x41efffff
   b53ac:	000b5bb0 	.word	0x000b5bb0
   b53b0:	c1efffff 	.word	0xc1efffff
   b53b4:	3fe00000 	.word	0x3fe00000
   b53b8:	000b5bb4 	.word	0x000b5bb4
   b53bc:	40240000 	.word	0x40240000

000b53c0 <_ZN5Print7printlnEdi>:
{
   b53c0:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b53c2:	b2c9      	uxtb	r1, r1
{
   b53c4:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b53c6:	f7ff ff33 	bl	b5230 <_ZN5Print10printFloatEdh>
   b53ca:	4604      	mov	r4, r0
  n += println();
   b53cc:	4628      	mov	r0, r5
   b53ce:	f7ff ff04 	bl	b51da <_ZN5Print7printlnEv>
}
   b53d2:	4420      	add	r0, r4
   b53d4:	bd38      	pop	{r3, r4, r5, pc}

000b53d6 <_ZN5Print7printlnEfi>:
{
   b53d6:	b538      	push	{r3, r4, r5, lr}
   b53d8:	4604      	mov	r4, r0
   b53da:	ee10 0a10 	vmov	r0, s0
   b53de:	460d      	mov	r5, r1
    return println((double)num, digits);
   b53e0:	f7fe ff80 	bl	b42e4 <__aeabi_f2d>
   b53e4:	ec41 0b10 	vmov	d0, r0, r1
   b53e8:	4629      	mov	r1, r5
   b53ea:	4620      	mov	r0, r4
}
   b53ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   b53f0:	f7ff bfe6 	b.w	b53c0 <_ZN5Print7printlnEdi>

000b53f4 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b53f4:	4b01      	ldr	r3, [pc, #4]	; (b53fc <_GLOBAL__sub_I_RGB+0x8>)
   b53f6:	2200      	movs	r2, #0
   b53f8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b53fa:	4770      	bx	lr
   b53fc:	2003e6d0 	.word	0x2003e6d0

000b5400 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5400:	b510      	push	{r4, lr}
   b5402:	4604      	mov	r4, r0
   b5404:	4608      	mov	r0, r1
{
    _spi = spi;
   b5406:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5408:	f7ff fbc6 	bl	b4b98 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b540c:	2300      	movs	r3, #0
   b540e:	6063      	str	r3, [r4, #4]
}
   b5410:	4620      	mov	r0, r4
   b5412:	bd10      	pop	{r4, pc}

000b5414 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5414:	4b05      	ldr	r3, [pc, #20]	; (b542c <_GLOBAL__sub_I_System+0x18>)
   b5416:	2202      	movs	r2, #2
   b5418:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b541a:	4b05      	ldr	r3, [pc, #20]	; (b5430 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b541c:	4a05      	ldr	r2, [pc, #20]	; (b5434 <_GLOBAL__sub_I_System+0x20>)
   b541e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5420:	2000      	movs	r0, #0
   b5422:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5426:	f7ff bc3f 	b.w	b4ca8 <set_system_mode>
   b542a:	bf00      	nop
   b542c:	2003e6ec 	.word	0x2003e6ec
   b5430:	2003e6e0 	.word	0x2003e6e0
   b5434:	ffff0000 	.word	0xffff0000

000b5438 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5438:	4b02      	ldr	r3, [pc, #8]	; (b5444 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b543a:	681a      	ldr	r2, [r3, #0]
   b543c:	4b02      	ldr	r3, [pc, #8]	; (b5448 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b543e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5440:	4770      	bx	lr
   b5442:	bf00      	nop
   b5444:	2003e63c 	.word	0x2003e63c
   b5448:	2003e6f0 	.word	0x2003e6f0

000b544c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b544c:	4770      	bx	lr

000b544e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b544e:	7441      	strb	r1, [r0, #17]
}
   b5450:	4770      	bx	lr

000b5452 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5452:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5454:	7c00      	ldrb	r0, [r0, #16]
   b5456:	f7ff fbdf 	bl	b4c18 <hal_usart_available_data_for_write>
}
   b545a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b545e:	bd08      	pop	{r3, pc}

000b5460 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5460:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5462:	7c00      	ldrb	r0, [r0, #16]
   b5464:	f7ff fbb0 	bl	b4bc8 <hal_usart_available>
}
   b5468:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b546c:	bd08      	pop	{r3, pc}

000b546e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b546e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5470:	7c00      	ldrb	r0, [r0, #16]
   b5472:	f7ff fbb9 	bl	b4be8 <hal_usart_peek>
}
   b5476:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b547a:	bd08      	pop	{r3, pc}

000b547c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b547c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b547e:	7c00      	ldrb	r0, [r0, #16]
   b5480:	f7ff fbaa 	bl	b4bd8 <hal_usart_read>
}
   b5484:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5488:	bd08      	pop	{r3, pc}

000b548a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b548a:	7c00      	ldrb	r0, [r0, #16]
   b548c:	f7ff bbb4 	b.w	b4bf8 <hal_usart_flush>

000b5490 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5490:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5492:	7c45      	ldrb	r5, [r0, #17]
{
   b5494:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5496:	b12d      	cbz	r5, b54a4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5498:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b549a:	b003      	add	sp, #12
   b549c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b54a0:	f7ff bb8a 	b.w	b4bb8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b54a4:	7c00      	ldrb	r0, [r0, #16]
   b54a6:	9101      	str	r1, [sp, #4]
   b54a8:	f7ff fbb6 	bl	b4c18 <hal_usart_available_data_for_write>
   b54ac:	2800      	cmp	r0, #0
   b54ae:	9901      	ldr	r1, [sp, #4]
   b54b0:	dcf2      	bgt.n	b5498 <_ZN11USARTSerial5writeEh+0x8>
}
   b54b2:	4628      	mov	r0, r5
   b54b4:	b003      	add	sp, #12
   b54b6:	bd30      	pop	{r4, r5, pc}

000b54b8 <_ZN11USARTSerialD0Ev>:
   b54b8:	b510      	push	{r4, lr}
   b54ba:	2114      	movs	r1, #20
   b54bc:	4604      	mov	r4, r0
   b54be:	f7ff faa6 	bl	b4a0e <_ZdlPvj>
   b54c2:	4620      	mov	r0, r4
   b54c4:	bd10      	pop	{r4, pc}
	...

000b54c8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b54c8:	b510      	push	{r4, lr}
   b54ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b54ce:	4604      	mov	r4, r0
   b54d0:	4608      	mov	r0, r1
   b54d2:	4611      	mov	r1, r2
   b54d4:	2200      	movs	r2, #0
   b54d6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b54da:	4b04      	ldr	r3, [pc, #16]	; (b54ec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b54dc:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b54de:	2301      	movs	r3, #1
  _serial = serial;
   b54e0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b54e2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b54e4:	f7ff fba0 	bl	b4c28 <hal_usart_init_ex>
}
   b54e8:	4620      	mov	r0, r4
   b54ea:	bd10      	pop	{r4, pc}
   b54ec:	000b5bdc 	.word	0x000b5bdc

000b54f0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b54f0:	7441      	strb	r1, [r0, #17]
}
   b54f2:	4770      	bx	lr

000b54f4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b54f4:	4770      	bx	lr

000b54f6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b54f6:	4770      	bx	lr

000b54f8 <_ZN9USBSerial4readEv>:
{
   b54f8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b54fa:	2100      	movs	r1, #0
   b54fc:	7c00      	ldrb	r0, [r0, #16]
   b54fe:	f7ff fbbb 	bl	b4c78 <HAL_USB_USART_Receive_Data>
}
   b5502:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5506:	bd08      	pop	{r3, pc}

000b5508 <_ZN9USBSerial4peekEv>:
{
   b5508:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b550a:	2101      	movs	r1, #1
   b550c:	7c00      	ldrb	r0, [r0, #16]
   b550e:	f7ff fbb3 	bl	b4c78 <HAL_USB_USART_Receive_Data>
}
   b5512:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5516:	bd08      	pop	{r3, pc}

000b5518 <_ZN9USBSerial17availableForWriteEv>:
{
   b5518:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b551a:	7c00      	ldrb	r0, [r0, #16]
   b551c:	f7ff fba4 	bl	b4c68 <HAL_USB_USART_Available_Data_For_Write>
}
   b5520:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5524:	bd08      	pop	{r3, pc}

000b5526 <_ZN9USBSerial9availableEv>:
{
   b5526:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5528:	7c00      	ldrb	r0, [r0, #16]
   b552a:	f7ff fb95 	bl	b4c58 <HAL_USB_USART_Available_Data>
}
   b552e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5532:	bd08      	pop	{r3, pc}

000b5534 <_ZN9USBSerial5writeEh>:
{
   b5534:	b513      	push	{r0, r1, r4, lr}
   b5536:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5538:	7c00      	ldrb	r0, [r0, #16]
{
   b553a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b553c:	f7ff fb94 	bl	b4c68 <HAL_USB_USART_Available_Data_For_Write>
   b5540:	2800      	cmp	r0, #0
   b5542:	9901      	ldr	r1, [sp, #4]
   b5544:	dc01      	bgt.n	b554a <_ZN9USBSerial5writeEh+0x16>
   b5546:	7c60      	ldrb	r0, [r4, #17]
   b5548:	b120      	cbz	r0, b5554 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b554a:	7c20      	ldrb	r0, [r4, #16]
   b554c:	f7ff fb9c 	bl	b4c88 <HAL_USB_USART_Send_Data>
   b5550:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5554:	b002      	add	sp, #8
   b5556:	bd10      	pop	{r4, pc}

000b5558 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5558:	7c00      	ldrb	r0, [r0, #16]
   b555a:	f7ff bb9d 	b.w	b4c98 <HAL_USB_USART_Flush_Data>

000b555e <_ZN9USBSerialD0Ev>:
   b555e:	b510      	push	{r4, lr}
   b5560:	2114      	movs	r1, #20
   b5562:	4604      	mov	r4, r0
   b5564:	f7ff fa53 	bl	b4a0e <_ZdlPvj>
   b5568:	4620      	mov	r0, r4
   b556a:	bd10      	pop	{r4, pc}

000b556c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b556c:	b510      	push	{r4, lr}
   b556e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5572:	4604      	mov	r4, r0
   b5574:	4608      	mov	r0, r1
   b5576:	2100      	movs	r1, #0
   b5578:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b557c:	4b04      	ldr	r3, [pc, #16]	; (b5590 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b557e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5580:	2301      	movs	r3, #1
  _serial = serial;
   b5582:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5584:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5586:	4611      	mov	r1, r2
   b5588:	f7ff fb56 	bl	b4c38 <HAL_USB_USART_Init>
}
   b558c:	4620      	mov	r0, r4
   b558e:	bd10      	pop	{r4, pc}
   b5590:	000b5c0c 	.word	0x000b5c0c

000b5594 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5594:	7c00      	ldrb	r0, [r0, #16]
   b5596:	2200      	movs	r2, #0
   b5598:	f7ff bb56 	b.w	b4c48 <HAL_USB_USART_Begin>

000b559c <_Z19acquireSerialBufferv>:
{
   b559c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b559e:	2214      	movs	r2, #20
{
   b55a0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b55a2:	2100      	movs	r1, #0
   b55a4:	f000 f9fe 	bl	b59a4 <memset>
}
   b55a8:	4620      	mov	r0, r4
   b55aa:	bd10      	pop	{r4, pc}

000b55ac <_Z16_fetch_usbserialv>:
{
   b55ac:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b55ae:	4c0f      	ldr	r4, [pc, #60]	; (b55ec <_Z16_fetch_usbserialv+0x40>)
{
   b55b0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b55b2:	a803      	add	r0, sp, #12
   b55b4:	f7ff fff2 	bl	b559c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b55b8:	7821      	ldrb	r1, [r4, #0]
   b55ba:	f3bf 8f5b 	dmb	ish
   b55be:	f011 0101 	ands.w	r1, r1, #1
   b55c2:	d10f      	bne.n	b55e4 <_Z16_fetch_usbserialv+0x38>
   b55c4:	4620      	mov	r0, r4
   b55c6:	9101      	str	r1, [sp, #4]
   b55c8:	f7ff fa23 	bl	b4a12 <__cxa_guard_acquire>
   b55cc:	9901      	ldr	r1, [sp, #4]
   b55ce:	b148      	cbz	r0, b55e4 <_Z16_fetch_usbserialv+0x38>
   b55d0:	aa03      	add	r2, sp, #12
   b55d2:	4807      	ldr	r0, [pc, #28]	; (b55f0 <_Z16_fetch_usbserialv+0x44>)
   b55d4:	f7ff ffca 	bl	b556c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b55d8:	4620      	mov	r0, r4
   b55da:	f7ff fa1f 	bl	b4a1c <__cxa_guard_release>
   b55de:	4805      	ldr	r0, [pc, #20]	; (b55f4 <_Z16_fetch_usbserialv+0x48>)
   b55e0:	f000 f9cc 	bl	b597c <atexit>
	return _usbserial;
}
   b55e4:	4802      	ldr	r0, [pc, #8]	; (b55f0 <_Z16_fetch_usbserialv+0x44>)
   b55e6:	b008      	add	sp, #32
   b55e8:	bd10      	pop	{r4, pc}
   b55ea:	bf00      	nop
   b55ec:	2003e6f4 	.word	0x2003e6f4
   b55f0:	2003e6f8 	.word	0x2003e6f8
   b55f4:	000b54f5 	.word	0x000b54f5

000b55f8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b55f8:	2200      	movs	r2, #0
   b55fa:	6840      	ldr	r0, [r0, #4]
   b55fc:	4611      	mov	r1, r2
   b55fe:	f7ff bb97 	b.w	b4d30 <network_ready>

000b5602 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5602:	2200      	movs	r2, #0
   b5604:	6840      	ldr	r0, [r0, #4]
   b5606:	4611      	mov	r1, r2
   b5608:	f7ff bbb2 	b.w	b4d70 <network_listening>

000b560c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b560c:	2200      	movs	r2, #0
   b560e:	6840      	ldr	r0, [r0, #4]
   b5610:	4611      	mov	r1, r2
   b5612:	f7ff bbbd 	b.w	b4d90 <network_get_listen_timeout>

000b5616 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5616:	6840      	ldr	r0, [r0, #4]
   b5618:	2200      	movs	r2, #0
   b561a:	f7ff bbb1 	b.w	b4d80 <network_set_listen_timeout>

000b561e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b561e:	6840      	ldr	r0, [r0, #4]
   b5620:	2200      	movs	r2, #0
   b5622:	f081 0101 	eor.w	r1, r1, #1
   b5626:	f7ff bb9b 	b.w	b4d60 <network_listen>

000b562a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b562a:	2300      	movs	r3, #0
   b562c:	6840      	ldr	r0, [r0, #4]
   b562e:	461a      	mov	r2, r3
   b5630:	4619      	mov	r1, r3
   b5632:	f7ff bb8d 	b.w	b4d50 <network_off>

000b5636 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5636:	2300      	movs	r3, #0
   b5638:	6840      	ldr	r0, [r0, #4]
   b563a:	461a      	mov	r2, r3
   b563c:	4619      	mov	r1, r3
   b563e:	f7ff bb7f 	b.w	b4d40 <network_on>

000b5642 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5642:	2200      	movs	r2, #0
   b5644:	6840      	ldr	r0, [r0, #4]
   b5646:	4611      	mov	r1, r2
   b5648:	f7ff bb62 	b.w	b4d10 <network_connecting>

000b564c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b564c:	6840      	ldr	r0, [r0, #4]
   b564e:	2200      	movs	r2, #0
   b5650:	2102      	movs	r1, #2
   b5652:	f7ff bb65 	b.w	b4d20 <network_disconnect>

000b5656 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5656:	2300      	movs	r3, #0
   b5658:	6840      	ldr	r0, [r0, #4]
   b565a:	461a      	mov	r2, r3
   b565c:	f7ff bb50 	b.w	b4d00 <network_connect>

000b5660 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5660:	4b02      	ldr	r3, [pc, #8]	; (b566c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5662:	2204      	movs	r2, #4
   b5664:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5666:	4a02      	ldr	r2, [pc, #8]	; (b5670 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5668:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b566a:	4770      	bx	lr
   b566c:	2003e70c 	.word	0x2003e70c
   b5670:	000b5c3c 	.word	0x000b5c3c

000b5674 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5674:	4b01      	ldr	r3, [pc, #4]	; (b567c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5676:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5678:	4770      	bx	lr
   b567a:	bf00      	nop
   b567c:	2003e640 	.word	0x2003e640

000b5680 <serialEventRun>:
{
   b5680:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5682:	4b0b      	ldr	r3, [pc, #44]	; (b56b0 <serialEventRun+0x30>)
   b5684:	b143      	cbz	r3, b5698 <serialEventRun+0x18>
   b5686:	f7ff ff91 	bl	b55ac <_Z16_fetch_usbserialv>
   b568a:	6803      	ldr	r3, [r0, #0]
   b568c:	691b      	ldr	r3, [r3, #16]
   b568e:	4798      	blx	r3
   b5690:	2800      	cmp	r0, #0
   b5692:	dd01      	ble.n	b5698 <serialEventRun+0x18>
        serialEvent();
   b5694:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5698:	4b06      	ldr	r3, [pc, #24]	; (b56b4 <serialEventRun+0x34>)
   b569a:	b143      	cbz	r3, b56ae <serialEventRun+0x2e>
   b569c:	f000 f948 	bl	b5930 <_Z22__fetch_global_Serial1v>
   b56a0:	6803      	ldr	r3, [r0, #0]
   b56a2:	691b      	ldr	r3, [r3, #16]
   b56a4:	4798      	blx	r3
   b56a6:	2800      	cmp	r0, #0
   b56a8:	dd01      	ble.n	b56ae <serialEventRun+0x2e>
        serialEvent1();
   b56aa:	f3af 8000 	nop.w
}
   b56ae:	bd08      	pop	{r3, pc}
	...

000b56b8 <_post_loop>:
{
   b56b8:	b508      	push	{r3, lr}
	serialEventRun();
   b56ba:	f7ff ffe1 	bl	b5680 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b56be:	f7ff f9fb 	bl	b4ab8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b56c2:	4b01      	ldr	r3, [pc, #4]	; (b56c8 <_post_loop+0x10>)
   b56c4:	6018      	str	r0, [r3, #0]
}
   b56c6:	bd08      	pop	{r3, pc}
   b56c8:	2003e728 	.word	0x2003e728

000b56cc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b56cc:	4805      	ldr	r0, [pc, #20]	; (b56e4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b56ce:	4a06      	ldr	r2, [pc, #24]	; (b56e8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b56d0:	4906      	ldr	r1, [pc, #24]	; (b56ec <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b56d2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b56d4:	1a12      	subs	r2, r2, r0
   b56d6:	f000 f957 	bl	b5988 <memcpy>
    __backup_sram_signature = signature;
   b56da:	4b05      	ldr	r3, [pc, #20]	; (b56f0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b56dc:	4a05      	ldr	r2, [pc, #20]	; (b56f4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b56de:	601a      	str	r2, [r3, #0]
}
   b56e0:	bd08      	pop	{r3, pc}
   b56e2:	bf00      	nop
   b56e4:	2003f400 	.word	0x2003f400
   b56e8:	2003f404 	.word	0x2003f404
   b56ec:	000b5d98 	.word	0x000b5d98
   b56f0:	2003f400 	.word	0x2003f400
   b56f4:	9a271c1e 	.word	0x9a271c1e

000b56f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b56f8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b56fa:	2300      	movs	r3, #0
   b56fc:	9300      	str	r3, [sp, #0]
   b56fe:	461a      	mov	r2, r3
   b5700:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5704:	f7ff faea 	bl	b4cdc <system_ctrl_set_result>
}
   b5708:	b003      	add	sp, #12
   b570a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5710 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5710:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5712:	8843      	ldrh	r3, [r0, #2]
   b5714:	2b0a      	cmp	r3, #10
   b5716:	d008      	beq.n	b572a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5718:	2b50      	cmp	r3, #80	; 0x50
   b571a:	d10b      	bne.n	b5734 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b571c:	4b09      	ldr	r3, [pc, #36]	; (b5744 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b571e:	681b      	ldr	r3, [r3, #0]
   b5720:	b14b      	cbz	r3, b5736 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5722:	b003      	add	sp, #12
   b5724:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5728:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b572a:	f7ff ffe5 	bl	b56f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b572e:	b003      	add	sp, #12
   b5730:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5734:	2300      	movs	r3, #0
   b5736:	9300      	str	r3, [sp, #0]
   b5738:	461a      	mov	r2, r3
   b573a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b573e:	f7ff facd 	bl	b4cdc <system_ctrl_set_result>
}
   b5742:	e7f4      	b.n	b572e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5744:	2003e718 	.word	0x2003e718

000b5748 <module_user_init_hook>:
{
   b5748:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b574a:	4812      	ldr	r0, [pc, #72]	; (b5794 <module_user_init_hook+0x4c>)
   b574c:	2100      	movs	r1, #0
   b574e:	f7ff fb4f 	bl	b4df0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5752:	4b11      	ldr	r3, [pc, #68]	; (b5798 <module_user_init_hook+0x50>)
   b5754:	681a      	ldr	r2, [r3, #0]
   b5756:	4b11      	ldr	r3, [pc, #68]	; (b579c <module_user_init_hook+0x54>)
   b5758:	429a      	cmp	r2, r3
   b575a:	4b11      	ldr	r3, [pc, #68]	; (b57a0 <module_user_init_hook+0x58>)
   b575c:	bf0c      	ite	eq
   b575e:	2201      	moveq	r2, #1
   b5760:	2200      	movne	r2, #0
   b5762:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5764:	d001      	beq.n	b576a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5766:	f7ff ffb1 	bl	b56cc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b576a:	f7ff f99d 	bl	b4aa8 <HAL_RNG_GetRandomNumber>
   b576e:	4604      	mov	r4, r0
    srand(seed);
   b5770:	f000 f920 	bl	b59b4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5774:	4b0b      	ldr	r3, [pc, #44]	; (b57a4 <module_user_init_hook+0x5c>)
   b5776:	b113      	cbz	r3, b577e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5778:	4620      	mov	r0, r4
   b577a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b577e:	2100      	movs	r1, #0
   b5780:	4808      	ldr	r0, [pc, #32]	; (b57a4 <module_user_init_hook+0x5c>)
   b5782:	f7ff fab5 	bl	b4cf0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b578a:	4807      	ldr	r0, [pc, #28]	; (b57a8 <module_user_init_hook+0x60>)
   b578c:	2100      	movs	r1, #0
   b578e:	f7ff ba9b 	b.w	b4cc8 <system_ctrl_set_app_request_handler>
   b5792:	bf00      	nop
   b5794:	000b5675 	.word	0x000b5675
   b5798:	2003f400 	.word	0x2003f400
   b579c:	9a271c1e 	.word	0x9a271c1e
   b57a0:	2003e714 	.word	0x2003e714
   b57a4:	00000000 	.word	0x00000000
   b57a8:	000b5711 	.word	0x000b5711

000b57ac <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b57ac:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b57ae:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b57b0:	d902      	bls.n	b57b8 <pinAvailable+0xc>
    return false;
   b57b2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b57b4:	b002      	add	sp, #8
   b57b6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b57b8:	f1a0 030b 	sub.w	r3, r0, #11
   b57bc:	2b02      	cmp	r3, #2
   b57be:	d81a      	bhi.n	b57f6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b57c0:	4c17      	ldr	r4, [pc, #92]	; (b5820 <pinAvailable+0x74>)
   b57c2:	7821      	ldrb	r1, [r4, #0]
   b57c4:	f3bf 8f5b 	dmb	ish
   b57c8:	f011 0101 	ands.w	r1, r1, #1
   b57cc:	d10b      	bne.n	b57e6 <pinAvailable+0x3a>
   b57ce:	4620      	mov	r0, r4
   b57d0:	9101      	str	r1, [sp, #4]
   b57d2:	f7ff f91e 	bl	b4a12 <__cxa_guard_acquire>
   b57d6:	9901      	ldr	r1, [sp, #4]
   b57d8:	b128      	cbz	r0, b57e6 <pinAvailable+0x3a>
   b57da:	4812      	ldr	r0, [pc, #72]	; (b5824 <pinAvailable+0x78>)
   b57dc:	f7ff fe10 	bl	b5400 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b57e0:	4620      	mov	r0, r4
   b57e2:	f7ff f91b 	bl	b4a1c <__cxa_guard_release>
   b57e6:	4b0f      	ldr	r3, [pc, #60]	; (b5824 <pinAvailable+0x78>)
   b57e8:	7818      	ldrb	r0, [r3, #0]
   b57ea:	f7ff f9dd 	bl	b4ba8 <hal_spi_is_enabled>
   b57ee:	2800      	cmp	r0, #0
   b57f0:	d1df      	bne.n	b57b2 <pinAvailable+0x6>
  return true; // 'pin' is available
   b57f2:	2001      	movs	r0, #1
   b57f4:	e7de      	b.n	b57b4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b57f6:	2801      	cmp	r0, #1
   b57f8:	d809      	bhi.n	b580e <pinAvailable+0x62>
   b57fa:	f000 f859 	bl	b58b0 <_Z19__fetch_global_Wirev>
   b57fe:	2100      	movs	r1, #0
   b5800:	7c00      	ldrb	r0, [r0, #16]
   b5802:	f7ff f9a1 	bl	b4b48 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5806:	f080 0001 	eor.w	r0, r0, #1
   b580a:	b2c0      	uxtb	r0, r0
   b580c:	e7d2      	b.n	b57b4 <pinAvailable+0x8>
   b580e:	3809      	subs	r0, #9
   b5810:	2801      	cmp	r0, #1
   b5812:	d8ee      	bhi.n	b57f2 <pinAvailable+0x46>
   b5814:	f000 f88c 	bl	b5930 <_Z22__fetch_global_Serial1v>
   b5818:	7c00      	ldrb	r0, [r0, #16]
   b581a:	f7ff f9f5 	bl	b4c08 <hal_usart_is_enabled>
   b581e:	e7f2      	b.n	b5806 <pinAvailable+0x5a>
   b5820:	2003e71c 	.word	0x2003e71c
   b5824:	2003e720 	.word	0x2003e720

000b5828 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5828:	2823      	cmp	r0, #35	; 0x23
{
   b582a:	b538      	push	{r3, r4, r5, lr}
   b582c:	4604      	mov	r4, r0
   b582e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5830:	d80a      	bhi.n	b5848 <pinMode+0x20>
   b5832:	29ff      	cmp	r1, #255	; 0xff
   b5834:	d008      	beq.n	b5848 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5836:	f7ff ffb9 	bl	b57ac <pinAvailable>
   b583a:	b128      	cbz	r0, b5848 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b583c:	4629      	mov	r1, r5
   b583e:	4620      	mov	r0, r4
}
   b5840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b5844:	f7ff b948 	b.w	b4ad8 <hal_gpio_mode>
}
   b5848:	bd38      	pop	{r3, r4, r5, pc}

000b584a <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b584a:	280d      	cmp	r0, #13
{
   b584c:	b510      	push	{r4, lr}
   b584e:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b5850:	bf9c      	itt	ls
   b5852:	340e      	addls	r4, #14
   b5854:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b5856:	4620      	mov	r0, r4
   b5858:	f7ff ffa8 	bl	b57ac <pinAvailable>
   b585c:	b150      	cbz	r0, b5874 <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b585e:	2103      	movs	r1, #3
   b5860:	4620      	mov	r0, r4
   b5862:	f7ff f931 	bl	b4ac8 <hal_pin_validate_function>
   b5866:	2803      	cmp	r0, #3
   b5868:	d104      	bne.n	b5874 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b586a:	4620      	mov	r0, r4
}
   b586c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b5870:	f7ff b93a 	b.w	b4ae8 <hal_adc_read>
}
   b5874:	2000      	movs	r0, #0
   b5876:	bd10      	pop	{r4, pc}

000b5878 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5878:	4770      	bx	lr
	...

000b587c <_Z17acquireWireBufferv>:
{
   b587c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b587e:	4b0a      	ldr	r3, [pc, #40]	; (b58a8 <_Z17acquireWireBufferv+0x2c>)
   b5880:	6003      	str	r3, [r0, #0]
   b5882:	2301      	movs	r3, #1
{
   b5884:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5886:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5888:	4908      	ldr	r1, [pc, #32]	; (b58ac <_Z17acquireWireBufferv+0x30>)
   b588a:	2020      	movs	r0, #32
   b588c:	f000 f874 	bl	b5978 <_ZnajRKSt9nothrow_t>
	};
   b5890:	2520      	movs	r5, #32
   b5892:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5894:	4905      	ldr	r1, [pc, #20]	; (b58ac <_Z17acquireWireBufferv+0x30>)
	};
   b5896:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5898:	4628      	mov	r0, r5
   b589a:	f000 f86d 	bl	b5978 <_ZnajRKSt9nothrow_t>
	};
   b589e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b58a2:	4620      	mov	r0, r4
   b58a4:	bd38      	pop	{r3, r4, r5, pc}
   b58a6:	bf00      	nop
   b58a8:	00010018 	.word	0x00010018
   b58ac:	000b5c70 	.word	0x000b5c70

000b58b0 <_Z19__fetch_global_Wirev>:
{
   b58b0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b58b2:	4d0e      	ldr	r5, [pc, #56]	; (b58ec <_Z19__fetch_global_Wirev+0x3c>)
   b58b4:	7829      	ldrb	r1, [r5, #0]
   b58b6:	f3bf 8f5b 	dmb	ish
   b58ba:	f011 0401 	ands.w	r4, r1, #1
{
   b58be:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b58c0:	d111      	bne.n	b58e6 <_Z19__fetch_global_Wirev+0x36>
   b58c2:	4628      	mov	r0, r5
   b58c4:	f7ff f8a5 	bl	b4a12 <__cxa_guard_acquire>
   b58c8:	b168      	cbz	r0, b58e6 <_Z19__fetch_global_Wirev+0x36>
   b58ca:	4668      	mov	r0, sp
   b58cc:	f7ff ffd6 	bl	b587c <_Z17acquireWireBufferv>
   b58d0:	466a      	mov	r2, sp
   b58d2:	4621      	mov	r1, r4
   b58d4:	4806      	ldr	r0, [pc, #24]	; (b58f0 <_Z19__fetch_global_Wirev+0x40>)
   b58d6:	f7ff fb05 	bl	b4ee4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b58da:	4628      	mov	r0, r5
   b58dc:	f7ff f89e 	bl	b4a1c <__cxa_guard_release>
   b58e0:	4804      	ldr	r0, [pc, #16]	; (b58f4 <_Z19__fetch_global_Wirev+0x44>)
   b58e2:	f000 f84b 	bl	b597c <atexit>
	return wire;
}
   b58e6:	4802      	ldr	r0, [pc, #8]	; (b58f0 <_Z19__fetch_global_Wirev+0x40>)
   b58e8:	b007      	add	sp, #28
   b58ea:	bd30      	pop	{r4, r5, pc}
   b58ec:	2003e72c 	.word	0x2003e72c
   b58f0:	2003e730 	.word	0x2003e730
   b58f4:	000b5879 	.word	0x000b5879

000b58f8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b58f8:	4770      	bx	lr
	...

000b58fc <_Z20acquireSerial1Bufferv>:
{
   b58fc:	b538      	push	{r3, r4, r5, lr}
   b58fe:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5900:	2514      	movs	r5, #20
   b5902:	462a      	mov	r2, r5
   b5904:	2100      	movs	r1, #0
   b5906:	f000 f84d 	bl	b59a4 <memset>
   b590a:	8025      	strh	r5, [r4, #0]
   b590c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b590e:	4907      	ldr	r1, [pc, #28]	; (b592c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5910:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5912:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5914:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5916:	f000 f82f 	bl	b5978 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b591a:	4904      	ldr	r1, [pc, #16]	; (b592c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b591c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b591e:	4628      	mov	r0, r5
   b5920:	f000 f82a 	bl	b5978 <_ZnajRKSt9nothrow_t>
    };
   b5924:	60e0      	str	r0, [r4, #12]
}
   b5926:	4620      	mov	r0, r4
   b5928:	bd38      	pop	{r3, r4, r5, pc}
   b592a:	bf00      	nop
   b592c:	000b5c70 	.word	0x000b5c70

000b5930 <_Z22__fetch_global_Serial1v>:
{
   b5930:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5932:	4d0e      	ldr	r5, [pc, #56]	; (b596c <_Z22__fetch_global_Serial1v+0x3c>)
   b5934:	7829      	ldrb	r1, [r5, #0]
   b5936:	f3bf 8f5b 	dmb	ish
   b593a:	f011 0401 	ands.w	r4, r1, #1
{
   b593e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5940:	d111      	bne.n	b5966 <_Z22__fetch_global_Serial1v+0x36>
   b5942:	4628      	mov	r0, r5
   b5944:	f7ff f865 	bl	b4a12 <__cxa_guard_acquire>
   b5948:	b168      	cbz	r0, b5966 <_Z22__fetch_global_Serial1v+0x36>
   b594a:	a801      	add	r0, sp, #4
   b594c:	f7ff ffd6 	bl	b58fc <_Z20acquireSerial1Bufferv>
   b5950:	aa01      	add	r2, sp, #4
   b5952:	4621      	mov	r1, r4
   b5954:	4806      	ldr	r0, [pc, #24]	; (b5970 <_Z22__fetch_global_Serial1v+0x40>)
   b5956:	f7ff fdb7 	bl	b54c8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b595a:	4628      	mov	r0, r5
   b595c:	f7ff f85e 	bl	b4a1c <__cxa_guard_release>
   b5960:	4804      	ldr	r0, [pc, #16]	; (b5974 <_Z22__fetch_global_Serial1v+0x44>)
   b5962:	f000 f80b 	bl	b597c <atexit>
    return serial1;
}
   b5966:	4802      	ldr	r0, [pc, #8]	; (b5970 <_Z22__fetch_global_Serial1v+0x40>)
   b5968:	b007      	add	sp, #28
   b596a:	bd30      	pop	{r4, r5, pc}
   b596c:	2003e744 	.word	0x2003e744
   b5970:	2003e748 	.word	0x2003e748
   b5974:	000b58f9 	.word	0x000b58f9

000b5978 <_ZnajRKSt9nothrow_t>:
   b5978:	f7ff b847 	b.w	b4a0a <_Znaj>

000b597c <atexit>:
   b597c:	2300      	movs	r3, #0
   b597e:	4601      	mov	r1, r0
   b5980:	461a      	mov	r2, r3
   b5982:	4618      	mov	r0, r3
   b5984:	f000 b844 	b.w	b5a10 <__register_exitproc>

000b5988 <memcpy>:
   b5988:	440a      	add	r2, r1
   b598a:	4291      	cmp	r1, r2
   b598c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b5990:	d100      	bne.n	b5994 <memcpy+0xc>
   b5992:	4770      	bx	lr
   b5994:	b510      	push	{r4, lr}
   b5996:	f811 4b01 	ldrb.w	r4, [r1], #1
   b599a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b599e:	4291      	cmp	r1, r2
   b59a0:	d1f9      	bne.n	b5996 <memcpy+0xe>
   b59a2:	bd10      	pop	{r4, pc}

000b59a4 <memset>:
   b59a4:	4402      	add	r2, r0
   b59a6:	4603      	mov	r3, r0
   b59a8:	4293      	cmp	r3, r2
   b59aa:	d100      	bne.n	b59ae <memset+0xa>
   b59ac:	4770      	bx	lr
   b59ae:	f803 1b01 	strb.w	r1, [r3], #1
   b59b2:	e7f9      	b.n	b59a8 <memset+0x4>

000b59b4 <srand>:
   b59b4:	b538      	push	{r3, r4, r5, lr}
   b59b6:	4b10      	ldr	r3, [pc, #64]	; (b59f8 <srand+0x44>)
   b59b8:	681d      	ldr	r5, [r3, #0]
   b59ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b59bc:	4604      	mov	r4, r0
   b59be:	b9b3      	cbnz	r3, b59ee <srand+0x3a>
   b59c0:	2018      	movs	r0, #24
   b59c2:	f7ff f9fd 	bl	b4dc0 <malloc>
   b59c6:	4602      	mov	r2, r0
   b59c8:	63a8      	str	r0, [r5, #56]	; 0x38
   b59ca:	b920      	cbnz	r0, b59d6 <srand+0x22>
   b59cc:	4b0b      	ldr	r3, [pc, #44]	; (b59fc <srand+0x48>)
   b59ce:	480c      	ldr	r0, [pc, #48]	; (b5a00 <srand+0x4c>)
   b59d0:	2142      	movs	r1, #66	; 0x42
   b59d2:	f7ff fa05 	bl	b4de0 <__assert_func>
   b59d6:	490b      	ldr	r1, [pc, #44]	; (b5a04 <srand+0x50>)
   b59d8:	4b0b      	ldr	r3, [pc, #44]	; (b5a08 <srand+0x54>)
   b59da:	e9c0 1300 	strd	r1, r3, [r0]
   b59de:	4b0b      	ldr	r3, [pc, #44]	; (b5a0c <srand+0x58>)
   b59e0:	6083      	str	r3, [r0, #8]
   b59e2:	230b      	movs	r3, #11
   b59e4:	8183      	strh	r3, [r0, #12]
   b59e6:	2100      	movs	r1, #0
   b59e8:	2001      	movs	r0, #1
   b59ea:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b59ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b59f0:	2200      	movs	r2, #0
   b59f2:	611c      	str	r4, [r3, #16]
   b59f4:	615a      	str	r2, [r3, #20]
   b59f6:	bd38      	pop	{r3, r4, r5, pc}
   b59f8:	2003e640 	.word	0x2003e640
   b59fc:	000b5c71 	.word	0x000b5c71
   b5a00:	000b5c88 	.word	0x000b5c88
   b5a04:	abcd330e 	.word	0xabcd330e
   b5a08:	e66d1234 	.word	0xe66d1234
   b5a0c:	0005deec 	.word	0x0005deec

000b5a10 <__register_exitproc>:
   b5a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5a14:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5ad0 <__register_exitproc+0xc0>
   b5a18:	4606      	mov	r6, r0
   b5a1a:	f8d8 0000 	ldr.w	r0, [r8]
   b5a1e:	461f      	mov	r7, r3
   b5a20:	460d      	mov	r5, r1
   b5a22:	4691      	mov	r9, r2
   b5a24:	f000 f856 	bl	b5ad4 <__retarget_lock_acquire_recursive>
   b5a28:	4b25      	ldr	r3, [pc, #148]	; (b5ac0 <__register_exitproc+0xb0>)
   b5a2a:	681c      	ldr	r4, [r3, #0]
   b5a2c:	b934      	cbnz	r4, b5a3c <__register_exitproc+0x2c>
   b5a2e:	4c25      	ldr	r4, [pc, #148]	; (b5ac4 <__register_exitproc+0xb4>)
   b5a30:	601c      	str	r4, [r3, #0]
   b5a32:	4b25      	ldr	r3, [pc, #148]	; (b5ac8 <__register_exitproc+0xb8>)
   b5a34:	b113      	cbz	r3, b5a3c <__register_exitproc+0x2c>
   b5a36:	681b      	ldr	r3, [r3, #0]
   b5a38:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b5a3c:	6863      	ldr	r3, [r4, #4]
   b5a3e:	2b1f      	cmp	r3, #31
   b5a40:	dd07      	ble.n	b5a52 <__register_exitproc+0x42>
   b5a42:	f8d8 0000 	ldr.w	r0, [r8]
   b5a46:	f000 f847 	bl	b5ad8 <__retarget_lock_release_recursive>
   b5a4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5a52:	b34e      	cbz	r6, b5aa8 <__register_exitproc+0x98>
   b5a54:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b5a58:	b988      	cbnz	r0, b5a7e <__register_exitproc+0x6e>
   b5a5a:	4b1c      	ldr	r3, [pc, #112]	; (b5acc <__register_exitproc+0xbc>)
   b5a5c:	b923      	cbnz	r3, b5a68 <__register_exitproc+0x58>
   b5a5e:	f8d8 0000 	ldr.w	r0, [r8]
   b5a62:	f000 f838 	bl	b5ad6 <__retarget_lock_release>
   b5a66:	e7f0      	b.n	b5a4a <__register_exitproc+0x3a>
   b5a68:	f44f 7084 	mov.w	r0, #264	; 0x108
   b5a6c:	f7ff f9a8 	bl	b4dc0 <malloc>
   b5a70:	2800      	cmp	r0, #0
   b5a72:	d0f4      	beq.n	b5a5e <__register_exitproc+0x4e>
   b5a74:	2300      	movs	r3, #0
   b5a76:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b5a7a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b5a7e:	6863      	ldr	r3, [r4, #4]
   b5a80:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b5a84:	2201      	movs	r2, #1
   b5a86:	409a      	lsls	r2, r3
   b5a88:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b5a8c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b5a90:	4313      	orrs	r3, r2
   b5a92:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b5a96:	2e02      	cmp	r6, #2
   b5a98:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b5a9c:	bf02      	ittt	eq
   b5a9e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b5aa2:	4313      	orreq	r3, r2
   b5aa4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b5aa8:	6863      	ldr	r3, [r4, #4]
   b5aaa:	f8d8 0000 	ldr.w	r0, [r8]
   b5aae:	1c5a      	adds	r2, r3, #1
   b5ab0:	3302      	adds	r3, #2
   b5ab2:	6062      	str	r2, [r4, #4]
   b5ab4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b5ab8:	f000 f80e 	bl	b5ad8 <__retarget_lock_release_recursive>
   b5abc:	2000      	movs	r0, #0
   b5abe:	e7c6      	b.n	b5a4e <__register_exitproc+0x3e>
   b5ac0:	2003e7e8 	.word	0x2003e7e8
   b5ac4:	2003e75c 	.word	0x2003e75c
   b5ac8:	00000000 	.word	0x00000000
   b5acc:	000b4dc1 	.word	0x000b4dc1
   b5ad0:	2003e6a4 	.word	0x2003e6a4

000b5ad4 <__retarget_lock_acquire_recursive>:
   b5ad4:	4770      	bx	lr

000b5ad6 <__retarget_lock_release>:
   b5ad6:	4770      	bx	lr

000b5ad8 <__retarget_lock_release_recursive>:
   b5ad8:	4770      	bx	lr

000b5ada <link_code_end>:
	...

000b5adc <dynalib_user>:
   b5adc:	4995 000b 49d1 000b 49f9 000b 49fd 000b     .I...I...I...I..
   b5aec:	0000 0000                                   ....

000b5af0 <_ZTVN5spark13EthernetClassE>:
	...
   b5af8:	4e6f 000b 4e65 000b 4e5b 000b 4e51 000b     oN..eN..[N..QN..
   b5b08:	4e45 000b 4e39 000b 5061 000b 5069 000b     EN..9N..aP..iP..
   b5b18:	4e2d 000b 4e25 000b 4e1b 000b 4e11 000b     -N..%N...N...N..
   b5b28:	5099 000b                                   .P..

000b5b2c <_ZTV7TwoWire>:
	...
   b5b34:	4e8d 000b 4ed7 000b 4eaf 000b 4e8f 000b     .N...N...N...N..
   b5b44:	4eb7 000b 4ebf 000b 4ec7 000b 4ecf 000b     .N...N...N...N..

000b5b54 <_ZTV9IPAddress>:
	...
   b5b5c:	4f31 000b 4f21 000b 4f23 000b 7061 0070     1O..!O..#O..app.

000b5b6c <_ZTVN5spark12NetworkClassE>:
	...
   b5b74:	5021 000b 502b 000b 5035 000b 503f 000b     !P..+P..5P..?P..
   b5b84:	5049 000b 5055 000b 5061 000b 5069 000b     IP..UP..aP..iP..
   b5b94:	5071 000b 507d 000b 5085 000b 508f 000b     qP..}P...P...P..
   b5ba4:	5099 000b 616e 006e 6e69 0066 766f 0066     .P..nan.inf.ovf.
   b5bb4:	002e 5925 252d 2d6d 6425 2554 3a48 4d25     ..%Y-%m-%dT%H:%M
   b5bc4:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000b5bd4 <_ZTV11USARTSerial>:
	...
   b5bdc:	544d 000b 54b9 000b 5491 000b 5185 000b     MT...T...T...Q..
   b5bec:	5461 000b 547d 000b 546f 000b 548b 000b     aT..}T..oT...T..
   b5bfc:	544f 000b 5453 000b                         OT..ST..

000b5c04 <_ZTV9USBSerial>:
	...
   b5c0c:	54f7 000b 555f 000b 5535 000b 5185 000b     .T.._U..5U...Q..
   b5c1c:	5527 000b 54f9 000b 5509 000b 5559 000b     'U...T...U..YU..
   b5c2c:	5519 000b 54f1 000b                         .U...T..

000b5c34 <_ZTVN5spark9WiFiClassE>:
	...
   b5c3c:	5657 000b 564d 000b 5643 000b 55f9 000b     WV..MV..CV...U..
   b5c4c:	5637 000b 562b 000b 5061 000b 5069 000b     7V..+V..aP..iP..
   b5c5c:	561f 000b 5617 000b 560d 000b 5603 000b     .V...V...V...V..
   b5c6c:	5099 000b                                   .P..

000b5c70 <_ZSt7nothrow>:
   b5c70:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b5c80:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b5c90:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b5ca0:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b5cb0:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b5cc0:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b5cd0:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b5ce1 <link_const_data_end>:
   b5ce1:	00          	.byte	0x00
	...

000b5ce4 <link_constructors_location>:
   b5ce4:	000b4a71 	.word	0x000b4a71
   b5ce8:	000b4e01 	.word	0x000b4e01
   b5cec:	000b4e79 	.word	0x000b4e79
   b5cf0:	000b5011 	.word	0x000b5011
   b5cf4:	000b5171 	.word	0x000b5171
   b5cf8:	000b53f5 	.word	0x000b53f5
   b5cfc:	000b5415 	.word	0x000b5415
   b5d00:	000b5439 	.word	0x000b5439
   b5d04:	000b5661 	.word	0x000b5661
